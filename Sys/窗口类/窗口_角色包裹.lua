--=============================================================================--
-- @作者: 白狐剑仙。
-- @邮箱: 1733450036@qq.com
-- @创建时间:   2017-08-01 12:45:25
-- @最后修改来自: 白狐剑仙。
-- @Last Modified time: 2017-11-22 22:48:51
--=============================================================================--
-- ★ 属性窗口类
--==============================================================================--
窗口_角色包裹类 = class()
--=============================================================================--
-- ■ 构造函数
--=============================================================================--
function 窗口_角色包裹类:初始化()

	self.标识 = "包裹窗口"

	self.包裹坐标x = 450
	self.包裹坐标y = 55

	self.包裹偏移x = 0
	self.包裹偏移y = 0

	self.移动 = true
	self.可移动 = true

	self.事件激活 = false

	self.最后激活时间 = 0

	self.点燃焦点 = true
	self.焦点 = false

	self.触发移动包围盒 = require ("gge包围盒")(self.包裹坐标x, self.包裹坐标y + 8, 268, 25)
	self.触发包围盒 = require ("gge包围盒")(self.包裹坐标x + 10, self.包裹坐标y + 10, 255, 430)

	self.面板精灵1 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/面板精灵1.png]], 0, 0, 39, 39)
	self.面板精灵2 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/面板精灵2.png]], 0, 0, 103, 31)
	self.面板精灵3 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/面板精灵3.png]], 0, 0, 80, 31)
	self.面板精灵4 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/面板精灵4.png]], 0, 0, 68, 31)

	self.窗口点燃精灵1 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/点燃精灵1.png]], 0, 0, 101, 24)
	self.窗口点燃精灵2 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/点燃精灵2.png]], 0, 0, 96, 19)
	self.窗口点燃精灵3 = require ("gge精灵类")(Q_目录..[[/Dat/UI/窗口横条/点燃精灵3.png]], 0, 0, 60, 19)
	self.窗口点燃精灵1:置混合(混合_颜色乘)
	self.窗口点燃精灵2:置混合(混合_颜色乘)
	self.窗口点燃精灵3:置混合(混合_颜色乘)

	self.图标精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/包裹图标.png]], 0, 0, 30, 30)

--装备子夹
	self.物品_子夹_普通_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/1.png]],0,0,70,20)
	self.物品_子夹_激活_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/2.png]],0,0,70,20)
	self.物品_子夹_选中_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/3.png]],0,0,70,21)

--装扮子夹
	self.装扮_子夹_普通_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/1.png]],0,0,70,20)
	self.装扮_子夹_激活_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/2.png]],0,0,70,20)
	self.装扮_子夹_选中_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/3.png]],0,0,70,21)

--宠物子夹
	self.宠物_子夹_普通_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/1.png]],0,0,70,20)
	self.宠物_子夹_激活_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/2.png]],0,0,70,20)
	self.宠物_子夹_选中_精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/长子夹/3.png]],0,0,70,21)


--装备
	self.装备背景精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/装备背景.png]],0,0,246,140)
	self.装备精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/装备栏.png]],0,0,242,100)
	self.装备格子精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/格子.png]],0,0,240,120)
	self.装备格子背景精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/装备格子背景.png]],0,0,250,154)

--时装
	self.装扮上精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/时装栏.png]],0,0,246,156)
	self.装扮附加精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/时装特效.png]],0,0,109,45)
	self.时装格子精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/格子.png]],0,0,210,120)
	self.时装格子背景精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/时装格子背景.png]],0,0,250,135)

--宠物
	self.宠物精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/宠物界面.png]],0,0,246,141)
	self.宠物格子精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/格子.png]],0,0,210,120)
	self.宠物格子背景精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/宠物格子背景.png]],0,0,250,154)


--通用部分
	self.金币背景精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/金币部分.png]],0,0,246,49)
	self.补间精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/补间.png]],0,0,106,3)
	self.补间精灵2 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/补间.png]],0,0,36,3)
	self.补间q精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/包裹UI/补间.png]],0,0,9,3)

	self.包裹关闭按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/窗口关闭按钮/]], self.包裹坐标x+245, self.包裹坐标y+13)
	self.包裹关闭按钮.音效 = 鼠标经过按钮音效

	self.包裹帮助按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/帮助按钮/]], self.包裹坐标x+228, self.包裹坐标y+13,"提示按钮","帮助")
	self.包裹帮助按钮.显示偏移.x = -15
	self.包裹帮助按钮.显示偏移.y = -33
	self.包裹帮助按钮.音效 = 鼠标经过按钮音效

	self.包裹整理按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/包裹整理按钮/]], self.包裹坐标x+200, self.包裹坐标y+353,"文字按钮","整理")
	self.包裹整理按钮.音效 = 鼠标经过按钮音效

	self.包裹金币按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/金币按钮/]], self.包裹坐标x+121, self.包裹坐标y+409,"提示按钮","丢弃金币")
	self.包裹金币按钮.显示偏移.x = -15
	self.包裹金币按钮.显示偏移.y = -30
	self.包裹金币按钮.音效 = 鼠标经过按钮音效

	self.包裹商城按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/包裹商城按钮/]], self.包裹坐标x+16, self.包裹坐标y+409,"提示按钮","商城")
	self.包裹商城按钮.显示偏移.x = -8
	self.包裹商城按钮.显示偏移.y = -30
	self.包裹商城按钮.音效 = 鼠标经过按钮音效

	self.包裹称号按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/包裹UI/称号簿按钮/]], self.包裹坐标x+25, self.包裹坐标y+169)
	self.包裹称号按钮.音效 = 鼠标经过按钮音效

	self.模式 = "物品"

	self.身体格子 = {}
	self.身体装扮格子 = {}

	self.子夹组 = {}

	self.子夹组[1] =
	{
		选中_默认图片 = Q_目录..[[/Dat/UI/包裹UI/子夹/3.png]],
		未选中_默认图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/1.png]],
		未选中_激活图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/2.png]],
		状态     = 3,
		格子 = {},
		x = self.包裹坐标x+20,
		y = self.包裹坐标y+205
	}

	self.子夹组[1].选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].选中_默认图片,0,0,47,21)
	self.子夹组[1].未选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].未选中_默认图片,0,0,47,20)
	self.子夹组[1].未选中_激活精灵 = require ("gge精灵类")(self.子夹组[1].未选中_激活图片,0,0,47,20)


	self.子夹组[2] =
	{
		选中_默认图片 = Q_目录..[[/Dat/UI/包裹UI/子夹/3.png]],
		未选中_默认图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/1.png]],
		未选中_激活图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/2.png]],
		状态     = 1,
		格子 = {},
		x = self.包裹坐标x+20+47,
		y = self.包裹坐标y+205
	}

	self.子夹组[2].选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].选中_默认图片,0,0,47,21)
	self.子夹组[2].未选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].未选中_默认图片,0,0,47,20)
	self.子夹组[2].未选中_激活精灵 = require ("gge精灵类")(self.子夹组[1].未选中_激活图片,0,0,47,20)



	self.子夹组[3] =
	{
		选中_默认图片 = Q_目录..[[/Dat/UI/包裹UI/子夹/3.png]],
		未选中_默认图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/1.png]],
		未选中_激活图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/2.png]],
		状态     = 1,
		格子 = {},
		x = self.包裹坐标x+20+47*2,
		y = self.包裹坐标y+205
	}

	self.子夹组[3].选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].选中_默认图片,0,0,47,21)
	self.子夹组[3].未选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].未选中_默认图片,0,0,47,20)
	self.子夹组[3].未选中_激活精灵 = require ("gge精灵类")(self.子夹组[1].未选中_激活图片,0,0,47,20)



	self.子夹组[4] =
	{
		选中_默认图片 = Q_目录..[[/Dat/UI/包裹UI/子夹/3.png]],
		未选中_默认图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/1.png]],
		未选中_激活图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/2.png]],
		状态     = 1,
		格子 = {},
		x = self.包裹坐标x+20+47*3,
		y = self.包裹坐标y+205
	}

	self.子夹组[4].选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].选中_默认图片,0,0,47,21)
	self.子夹组[4].未选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].未选中_默认图片,0,0,47,20)
	self.子夹组[4].未选中_激活精灵 = require ("gge精灵类")(self.子夹组[1].未选中_激活图片,0,0,47,20)


	self.子夹组[5] =
	{
		选中_默认图片 = Q_目录..[[/Dat/UI/包裹UI/子夹/3.png]],
		未选中_默认图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/1.png]],
		未选中_激活图片  = Q_目录..[[/Dat/UI/包裹UI/子夹/2.png]],
		状态     = 1,
		格子 = {},
		x = self.包裹坐标x+20+47*4,
		y = self.包裹坐标y+205
	}

	self.子夹组[5].选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].选中_默认图片,0,0,47,21)
	self.子夹组[5].未选中_默认精灵 = require ("gge精灵类")(self.子夹组[1].未选中_默认图片,0,0,47,20)
	self.子夹组[5].未选中_激活精灵 = require ("gge精灵类")(self.子夹组[1].未选中_激活图片,0,0,47,20)

	local n = 0

	for i=1,4 do
		for j=1,8 do
			n = n + 1
			self.子夹组[1].格子[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-12,i * 30 +self.包裹坐标y+201,28,28,n,"装备")
			self.子夹组[2].格子[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-12,i * 30 +self.包裹坐标y+201,28,28,n,"消耗品")
			self.子夹组[3].格子[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-12,i * 30 +self.包裹坐标y+201,28,28,n,"材料")
			self.子夹组[4].格子[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-12,i * 30 +self.包裹坐标y+201,28,28,n,"任务")
            self.子夹组[5].格子[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-12,i * 30 +self.包裹坐标y+201,28,28,n,"副职业")
		end
	end

	self.装扮格子组 = {}

	n = 0

	for i=1,4 do
		for j=1,7 do
			n = n + 1
			self.装扮格子组[n] = 格子_包裹格子.创建(j * 30 + self.包裹坐标x-4,i * 30 +self.包裹坐标y+230,28,28,500+n,"装扮")
		end
	end


	self.身体装扮格子[1] = 格子_包裹格子.创建(self.包裹坐标x+157,self.包裹坐标y+93,28,28,601,"装扮")
	self.身体装扮格子[2] = 格子_包裹格子.创建(self.包裹坐标x+157+33,self.包裹坐标y+93,28,28,602,"装扮")
	self.身体装扮格子[3] = 格子_包裹格子.创建(self.包裹坐标x+157+33*2,self.包裹坐标y+93,28,28,603,"装扮")
	self.身体装扮格子[4] = 格子_包裹格子.创建(self.包裹坐标x+157,self.包裹坐标y+94+33,28,28,604,"装扮")
	self.身体装扮格子[5] = 格子_包裹格子.创建(self.包裹坐标x+157+33,self.包裹坐标y+94+33,28,28,605,"装扮")
	self.身体装扮格子[6] = 格子_包裹格子.创建(self.包裹坐标x+157+33*2,self.包裹坐标y+94+33,28,28,606,"装扮")
	self.身体装扮格子[7] = 格子_包裹格子.创建(self.包裹坐标x+157,self.包裹坐标y+95+33*2,28,28,607,"装扮")
	self.身体装扮格子[8] = 格子_包裹格子.创建(self.包裹坐标x+157+33,self.包裹坐标y+95+33*2,28,28,608,"装扮")
	self.身体装扮格子[9] = 格子_包裹格子.创建(self.包裹坐标x+157+33*2,self.包裹坐标y+95+33*2,28,28,609,"装扮")


	self.身体格子[1] = 格子_包裹格子.创建(self.包裹坐标x+22,self.包裹坐标y+69,28,28,101,"装备")
	self.身体格子[2] = 格子_包裹格子.创建(self.包裹坐标x+22+32,self.包裹坐标y+69,28,28,102,"装备")
	self.身体格子[3] = 格子_包裹格子.创建(self.包裹坐标x+22,self.包裹坐标y+69+32,28,28,103,"装备")
	self.身体格子[4] = 格子_包裹格子.创建(self.包裹坐标x+22+32,self.包裹坐标y+69+32,28,28,104,"装备")
	self.身体格子[5] = 格子_包裹格子.创建(self.包裹坐标x+22,self.包裹坐标y+69+32*2,28,28,105,"装备")
	self.身体格子[6] = 格子_包裹格子.创建(self.包裹坐标x+196,self.包裹坐标y+69+32,28,28,106,"装备")
	self.身体格子[7] = 格子_包裹格子.创建(self.包裹坐标x+196+32,self.包裹坐标y+69+32,28,28,107,"装备")
	self.身体格子[8] = 格子_包裹格子.创建(self.包裹坐标x+196+32,self.包裹坐标y+69+32*2,28,28,108,"装备")
	self.身体格子[9] = 格子_包裹格子.创建(self.包裹坐标x+196,self.包裹坐标y+69,28,28,109,"装备")
	self.身体格子[10] = 格子_包裹格子.创建(self.包裹坐标x+196+32,self.包裹坐标y+69,28,28,110,"装备")



	self.子夹组[1].格子[1]:置道具(4,false,1)
	self.子夹组[1].格子[2]:置道具(4,false,1)
	self.子夹组[2].格子[1]:置道具(2,false,1)


	self.当前选择夹 = self.子夹组[1]
	self.子夹ID = 1


	self.可视 = false

	self.纸娃娃动画组 = 复制表(Q_主角.纸娃娃组_展示)

    if (Q_主角.职业 == "鬼剑士") then
		self.纸娃娃动画帧 = {偏移= 210,开始 = 177,结束 = 180}
	end

    if (Q_主角.职业 == "鬼剑士") then
		self.纸娃娃动画帧物品界面 = {偏移= 210,开始 = 91,结束 = 96}
	end

end

--=============================================================================--
-- ■ 更新
--=============================================================================--
function 窗口_角色包裹类:更新()

	if (self.可视 ) then

		if (Q_屏幕.鼠标窗口全id ~= 0 and Q_界面_窗口_数组[Q_屏幕.鼠标窗口全id].标识 == "包裹窗口" ) then
			self.焦点 = true

		else
			self.焦点 = false
		end

		if (self.焦点  and 引擎.鼠标按下(键_鼠标左)) then
			self.点燃焦点 = true
			self.最后激活时间 = 引擎.取时间戳()
		elseif (self.焦点 == false and 引擎.鼠标按下(键_鼠标左)) then
			self.点燃焦点 = false
		end


		if(Q_屏幕.鼠标窗口全id ~= 0 and Q_界面_窗口_数组[Q_屏幕.鼠标窗口全id].标识 == "包裹窗口" )then

			if(self.模式 == "物品")then

				self.包裹称号按钮:更新()

				for n=1,32 do
					self.当前选择夹.格子[n]:更新()
				end

				for n=1,table.getn(self.身体格子) do
					self.身体格子[n]:更新()
				end

				--if (Q_信息框.焦点 == false) then
					for n=1,table.getn(self.子夹组 ) do
						if (self.当前选择夹.状态 == 3 and  self.当前选择夹 ~= self.子夹组 [n]) then
							self.子夹组[n].状态 = 1
						end
						if (self.子夹组[n].未选中_默认精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
							if (self.子夹组[n].状态  == 1) then
								self.子夹组[n].状态  = 2
							end
							if (引擎.鼠标弹起(键_鼠标左) and self.子夹组 [n].状态  == 2 )then
								self.子夹组[n].状态 = 3
								self.当前选择夹 = self.子夹组[n]
								self.子夹ID = n
							end
						else
							if (self.子夹组 [n].状态  == 2) then
								self.子夹组 [n].状态 = 1
							end
						end
					end
				--end

			elseif (self.模式 == "装扮") then

				for n=1,28	do
					self.装扮格子组[n]:更新()
				end

				for n=1,table.getn(self.身体装扮格子) do
					self.身体装扮格子[n]:更新()
				end

			elseif (self.模式 == "宠物") then
			end
		end


		if( self.包裹关闭按钮:取是否单击()) then
				self.可视 = false
				窗口关闭音效:播放()
				--if (Q_商店窗口.可视) then
				--	Q_商店窗口:开关()
				--end

			   --if (Q_分解强化窗口.可视) then
				--Q_分解强化窗口:开关()
			   --end

				--if(Q_信息框.可视  ) then
				--	Q_信息框:关闭()
				--end
		end

		if( self.包裹整理按钮:取是否单击() )then
			按钮按下音效:播放()
		end

		self.包裹关闭按钮:更新()
		self.包裹整理按钮:更新()
		self.包裹金币按钮:更新()
		self.包裹商城按钮:更新()
		self.包裹帮助按钮:更新()

	end
end

--=============================================================================--
-- ■ 开关
--=============================================================================--
function 窗口_角色包裹类:开关()

	self.可视 = not self.可视
	if (self.可视) then

		self.包裹坐标x = 450
		self.包裹坐标y = 55
		self.包裹关闭按钮:置位置(self.包裹坐标x + 245, self.包裹坐标y + 13)
		self.包裹整理按钮:置位置(self.包裹坐标x + 200, self.包裹坐标y + 353)
		self.包裹金币按钮:置位置(self.包裹坐标x + 121, self.包裹坐标y + 409)
		self.包裹商城按钮:置位置(self.包裹坐标x + 15, self.包裹坐标y + 409)
		self.包裹称号按钮:置位置(self.包裹坐标x + 25, self.包裹坐标y + 169)
		self.包裹帮助按钮:置位置(self.包裹坐标x + 228, self.包裹坐标y + 13)

		self.子夹组[1].x,self.子夹组[1].y = self.包裹坐标x + 20,self.包裹坐标y + 205
		self.子夹组[2].x,self.子夹组[2].y = self.包裹坐标x + 20 + 47,self.包裹坐标y + 205
		self.子夹组[3].x,self.子夹组[3].y = self.包裹坐标x + 20 + 94,self.包裹坐标y + 205
		self.子夹组[4].x,self.子夹组[4].y  = self.包裹坐标x + 20 + 141,self.包裹坐标y + 205
		self.子夹组[5].x,self.子夹组[5].y = self.包裹坐标x + 20 + 188,self.包裹坐标y + 205

		self.身体格子[1].x,self.身体格子[1].y = self.包裹坐标x + 22,self.包裹坐标y + 69
		self.身体格子[2].x,self.身体格子[2].y = self.包裹坐标x + 22 + 32,self.包裹坐标y + 69
		self.身体格子[3].x,self.身体格子[3].y = self.包裹坐标x + 22,self.包裹坐标y + 69 + 32
		self.身体格子[4].x,self.身体格子[4].y = self.包裹坐标x + 22,self.包裹坐标y + 69 + 64
		self.身体格子[5].x,self.身体格子[5].y = self.包裹坐标x + 22 + 32,self.包裹坐标y + 69 + 32
		self.身体格子[6].x,self.身体格子[6].y = self.包裹坐标x + 196,self.包裹坐标y + 69 + 32
		self.身体格子[7].x,self.身体格子[7].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69 + 32
		self.身体格子[8].x,self.身体格子[8].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69 + 64
		self.身体格子[9].x,self.身体格子[9].y = self.包裹坐标x + 196,self.包裹坐标y + 69
		self.身体格子[10].x,self.身体格子[10].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69

		self.身体装扮格子[1].x,self.身体装扮格子[1].y = self.包裹坐标x + 157,self.包裹坐标y + 93
		self.身体装扮格子[2].x,self.身体装扮格子[2].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 93
		self.身体装扮格子[3].x,self.身体装扮格子[3].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 93
		self.身体装扮格子[4].x,self.身体装扮格子[4].y = self.包裹坐标x + 157,self.包裹坐标y + 94 + 33
		self.身体装扮格子[5].x,self.身体装扮格子[5].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 94 + 33
		self.身体装扮格子[6].x,self.身体装扮格子[6].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 94 + 33
		self.身体装扮格子[7].x,self.身体装扮格子[7].y = self.包裹坐标x + 157,self.包裹坐标y + 95 + 66
		self.身体装扮格子[8].x,self.身体装扮格子[8].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 95 + 66
		self.身体装扮格子[9].x,self.身体装扮格子[9].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 95 + 66

		local n = 0
		for i = 1, 4 do
			for j = 1, 8 do
				n = n + 1
				self.子夹组[1].格子[n].x,self.子夹组[1].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[2].格子[n].x,self.子夹组[2].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[3].格子[n].x,self.子夹组[3].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[4].格子[n].x,self.子夹组[4].格子[n].y = j * 30 + self.包裹坐标x - 12, i * 30 + self.包裹坐标y + 201
				self.子夹组[5].格子[n].x,self.子夹组[5].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
			end
		end

		n = 0
		for i = 1, 4 do
			for j = 1, 7 do
				n = n + 1
				self.装扮格子组[n].x,self.装扮格子组[n].y = j * 30 + self.包裹坐标x - 4,i * 30 + self.包裹坐标y + 230
			end
		end

		self.触发移动包围盒:置坐标(self.包裹坐标x, self.包裹坐标y + 8)
		self.触发包围盒:置坐标(self.包裹坐标x + 10, self.包裹坐标y + 10)


		self.最后激活时间 = 引擎.取时间戳()
		self.焦点 = true
		self.点燃焦点 = true
		--Q_商店窗口.点燃焦点 = false
		窗口打开音效:播放()

	else
		self.焦点 = false
		窗口关闭音效:播放()

	end

	--if(Q_信息框.可视) then
	--	Q_信息框:关闭()
	--end

end

--=============================================================================--
-- ■ 显示
--=============================================================================--
function 窗口_角色包裹类:显示()

	if (self.可视) then

		Q_风格框(self.包裹坐标x + 7, self.包裹坐标y + 25, 242, 396, 255, 1)

		self.金币背景精灵:显示(self.包裹坐标x+14,self.包裹坐标y+384)

		self.面板精灵2:显示(self.包裹坐标x + 20, self.包裹坐标y + 6)
		self.面板精灵3:显示(self.包裹坐标x + 123, self.包裹坐标y + 6)
		self.面板精灵4:显示(self.包裹坐标x + 203, self.包裹坐标y + 6)
		self.面板精灵1:显示(self.包裹坐标x , self.包裹坐标y)
		self.图标精灵:显示(self.包裹坐标x + 4 , self.包裹坐标y +7)

		self.包裹帮助按钮:显示()
		self.包裹关闭按钮:显示()
	    self.包裹金币按钮:显示()
        self.包裹商城按钮:显示()
		if (self.点燃焦点)then
			self.窗口点燃精灵1:显示(self.包裹坐标x + 7, self.包裹坐标y + 7)
			self.窗口点燃精灵2:显示(self.包裹坐标x + 108, self.包裹坐标y + 12)
			self.窗口点燃精灵3:显示(self.包裹坐标x + 204, self.包裹坐标y + 12)
		end
		if (self.模式 == "物品") then

			self.装备格子背景精灵:显示(self.包裹坐标x+13,self.包裹坐标y+227)
			self.装备格子精灵:显示(self.包裹坐标x+16,self.包裹坐标y+230)
			self.装备背景精灵:显示(self.包裹坐标x+15,self.包裹坐标y+63)

			for n=1,table.getn(self.纸娃娃动画组 ) do
				self.纸娃娃动画组[n].动画:更新(30,self.纸娃娃动画帧物品界面.偏移 * (self.纸娃娃动画组[n].索引 -1) + self.纸娃娃动画帧物品界面.开始,self.纸娃娃动画帧物品界面.偏移 * (self.纸娃娃动画组[n].索引 -1) + self.纸娃娃动画帧物品界面.结束)
				self.纸娃娃动画组[n].动画:置坐标_高级(self.包裹坐标x+130,self.包裹坐标y+190,1,1,0,false)
				self.纸娃娃动画组[n].动画:显示()
			end

			self.装备精灵:显示(self.包裹坐标x+17,self.包裹坐标y+65)

			self.补间精灵:显示(self.包裹坐标x+158,self.包裹坐标y+57)
		    self.补间q精灵:显示(self.包裹坐标x+13,self.包裹坐标y+57)
			self.补间q精灵:显示(self.包裹坐标x+13,self.包裹坐标y+222)
		    self.补间q精灵:显示(self.包裹坐标x+255,self.包裹坐标y+222)

			self.包裹整理按钮:显示()
			self.包裹称号按钮:显示()

			self.装扮_子夹_普通_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
			self.物品_子夹_选中_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+39)
			self.宠物_子夹_普通_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+39)

			for n=1,table.getn(self.子夹组 ) do
				if (self.子夹组[n].状态 == 1) then
					self.子夹组[n].未选中_默认精灵:显示(self.子夹组[n].x,self.子夹组[n].y)
				elseif (self.子夹组[n].状态 == 2) then
					self.子夹组[n].未选中_激活精灵:显示(self.子夹组[n].x,self.子夹组[n].y)
				elseif (self.子夹组[n].状态 == 3) then
					self.子夹组[n].选中_默认精灵:显示(self.子夹组[n].x,self.子夹组[n].y-1)
				end
			end

			for n=1,32 do
				self.当前选择夹.格子[n]:显示()
			end

			for n=1,table.getn(self.身体格子)do
				self.身体格子[n]:显示()
			end

			if (self.装扮_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
			    self.装扮_子夹_激活_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
			    if (引擎.鼠标按下(键_鼠标左)) then
				    self.模式 = "装扮"
			    end
			else
				self.装扮_子夹_普通_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
		    end

			self.物品_子夹_选中_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+39)

			if (self.宠物_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then

				self.宠物_子夹_选中_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+40)
				if (引擎.鼠标按下(键_鼠标左)) then
					self.模式 = "宠物"
				end
				self.装扮_子夹_普通_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
			else
				self.宠物_子夹_普通_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+40)
			end

			文字_描边显示(文字,self.包裹坐标x+32,self.包裹坐标y+210,"装备",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+32+41,self.包裹坐标y+210,"消耗品",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+32+47*2,self.包裹坐标y+210,"材料",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+33+44*3,self.包裹坐标y+210,"副职业",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+32+47*4,self.包裹坐标y+210,"任务",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+110,self.包裹坐标y+15,"装备栏(I)",颜色_白)
			文字_描边显示(文字,self.包裹坐标x+107,self.包裹坐标y+45,"装扮栏",-1652581,颜色_黑)
		    文字_描边显示(文字,self.包裹坐标x+37,self.包裹坐标y+45,"物品栏",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+177,self.包裹坐标y+45,"宠物栏",-1652581,颜色_黑)

		elseif (self.模式 == "装扮") then

		    self.装扮上精灵:显示(self.包裹坐标x+15,self.包裹坐标y+63)
			self.补间精灵:显示(self.包裹坐标x+158,self.包裹坐标y+57)
		    self.补间q精灵:显示(self.包裹坐标x+13,self.包裹坐标y+57)
			self.时装格子背景精灵:显示(self.包裹坐标x+13,self.包裹坐标y+248)
			self.时装格子精灵:显示(self.包裹坐标x+24,self.包裹坐标y+258)
			self.装扮附加精灵:显示(self.包裹坐标x+20,self.包裹坐标y+173)
			self.装扮附加精灵:置混合(混合_颜色乘)

			for n=1,28 do
				self.装扮格子组[n]:显示()
			end

			for n=1,table.getn(self.身体装扮格子) do
				self.身体装扮格子[n]:显示()
			end

			for n=1,table.getn(self.纸娃娃动画组) do
				self.纸娃娃动画组[n].动画:更新(30,self.纸娃娃动画帧.偏移 * (self.纸娃娃动画组[n].索引 -1) + self.纸娃娃动画帧.开始,self.纸娃娃动画帧.偏移 * (self.纸娃娃动画组[n].索引 -1) + self.纸娃娃动画帧.结束)
				self.纸娃娃动画组[n].动画:置坐标_高级(self.包裹坐标x+70,self.包裹坐标y+200,1,1,0,false)
				self.纸娃娃动画组[n].动画:显示(self.包裹坐标x+70,self.包裹坐标y+200,1,1,0,false)
			end

            self.装扮_子夹_选中_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+39)
			self.物品_子夹_普通_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+40)
			self.宠物_子夹_普通_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+39)

			if (self.物品_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
			      self.物品_子夹_激活_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+40)
			      if (引擎.鼠标按下(键_鼠标左)) then
				      self.模式 = "物品"
			      end
			else
				self.物品_子夹_普通_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+40)
		    end

			if (self.宠物_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
				self.宠物_子夹_激活_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+40)
				if (引擎.鼠标按下(键_鼠标左)) then
					self.模式 = "宠物"
				end
			else
				self.宠物_子夹_普通_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+40)
			end

		    文字_描边显示(文字,self.包裹坐标x+107,self.包裹坐标y+45,"装扮栏",-1652581,颜色_黑)
		    文字_描边显示(文字,self.包裹坐标x+37,self.包裹坐标y+45,"物品栏",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+177,self.包裹坐标y+45,"宠物栏",-1652581,颜色_黑)
		    --文字_描边显示(文字,self.包裹坐标x+234,self.包裹坐标y+415,"金币",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+110,self.包裹坐标y+15,"装扮栏(U)",颜色_白)

		elseif (self.模式 == "宠物") then

			self.宠物精灵:显示(self.包裹坐标x+15,self.包裹坐标y+63)

			self.宠物格子背景精灵:显示(self.包裹坐标x+13,self.包裹坐标y+227)
			self.宠物格子精灵:显示(self.包裹坐标x+21,self.包裹坐标y+230)

			self.补间精灵2:显示(self.包裹坐标x+228,self.包裹坐标y+57)
			self.补间q精灵:显示(self.包裹坐标x+13,self.包裹坐标y+57)

			self.宠物_子夹_选中_精灵:显示(self.包裹坐标x+160,self.包裹坐标y+39)
			if (self.物品_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
				self.物品_子夹_激活_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+40)
				if (引擎.鼠标按下(键_鼠标左)) then
					self.模式 = "物品"
				end
			else
				self.物品_子夹_普通_精灵:显示(self.包裹坐标x+20,self.包裹坐标y+40)
			end

            if (self.装扮_子夹_普通_精灵:取包围盒():检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
				self.装扮_子夹_激活_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
				if (引擎.鼠标按下(键_鼠标左)) then
					self.模式 = "装扮"
				end
			else
				self.装扮_子夹_普通_精灵:显示(self.包裹坐标x+90,self.包裹坐标y+40)
			end

			文字_描边显示(文字,self.包裹坐标x+110,self.包裹坐标y+15,"宠物栏(F6)",颜色_白)
			文字_描边显示(文字,self.包裹坐标x+107,self.包裹坐标y+45,"装扮栏",-1652581,颜色_黑)
		    文字_描边显示(文字,self.包裹坐标x+37,self.包裹坐标y+45,"物品栏",-1652581,颜色_黑)
			文字_描边显示(文字,self.包裹坐标x+177,self.包裹坐标y+45,"宠物栏",-1652581,颜色_黑)

		end

		local 格式化复活币 = 数值到格式文本(Q_主角.复活币,true)
		--local 格式化复活币 = string.format(Q_主角.复活币)
		文字_描边显示(文字,self.包裹坐标x+94-文字:取宽度(格式化复活币),self.包裹坐标y+388,格式化复活币,-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+94,self.包裹坐标y+388," 个",-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+94-文字:取宽度(格式化复活币),self.包裹坐标y+388,格式化复活币,-1652581,颜色_黑)

		local 格式化金币 = 数值到格式文本(Q_主角.金币,true)
		--local 格式化金币 = string.format(Q_主角.金币)
		文字_描边显示(文字,self.包裹坐标x+234-文字:取宽度(格式化金币),self.包裹坐标y+415,格式化金币,-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+234,self.包裹坐标y+415,"金币",-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+234-文字:取宽度(格式化金币),self.包裹坐标y+415,格式化金币,-1652581,颜色_黑)

		local 格式化S点 = 数值到格式文本(Q_主角.S点,true)
		--local 格式化S点 = string.format(Q_主角.S点)
		文字_描边显示(文字,self.包裹坐标x+234-文字:取宽度(格式化S点),self.包裹坐标y+388,格式化S点,-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+234,self.包裹坐标y+388," S点",-1652581,颜色_黑)
		文字_描边显示(文字,self.包裹坐标x+234-文字:取宽度(格式化S点),self.包裹坐标y+388,格式化S点,-1652581,颜色_黑)--]]

	end

	if( Q_调试 and self.可视) then
		self.触发移动包围盒:显示()
		self.触发包围盒:显示()
	end

end

--=============================================================================--
-- ■ 开始移动()
--=============================================================================--
function 窗口_角色包裹类:开始移动()

	if (self.可视 and self.焦点 and self.可移动) then

		self.包裹坐标x = Q_鼠标坐标.x - self.包裹偏移x
		self.包裹坐标y = Q_鼠标坐标.y - self.包裹偏移y

		self.包裹关闭按钮:置位置(self.包裹坐标x + 245, self.包裹坐标y + 13)
		self.包裹整理按钮:置位置(self.包裹坐标x + 200, self.包裹坐标y + 353)
		self.包裹金币按钮:置位置(self.包裹坐标x + 121, self.包裹坐标y + 409)
		self.包裹商城按钮:置位置(self.包裹坐标x + 15, self.包裹坐标y + 409)
		self.包裹称号按钮:置位置(self.包裹坐标x + 25, self.包裹坐标y + 169)
		self.包裹帮助按钮:置位置(self.包裹坐标x + 228, self.包裹坐标y + 13)

		self.子夹组[1].x,self.子夹组[1].y = self.包裹坐标x + 20,self.包裹坐标y + 205
		self.子夹组[2].x,self.子夹组[2].y = self.包裹坐标x + 20 + 47,self.包裹坐标y + 205
		self.子夹组[3].x,self.子夹组[3].y = self.包裹坐标x + 20 + 94,self.包裹坐标y + 205
		self.子夹组[4].x,self.子夹组[4].y  = self.包裹坐标x + 20 + 141,self.包裹坐标y + 205
		self.子夹组[5].x,self.子夹组[5].y = self.包裹坐标x + 20 + 188,self.包裹坐标y + 205

		self.身体格子[1].x,self.身体格子[1].y = self.包裹坐标x + 22,self.包裹坐标y + 69
		self.身体格子[2].x,self.身体格子[2].y = self.包裹坐标x + 22 + 32,self.包裹坐标y + 69
		self.身体格子[3].x,self.身体格子[3].y = self.包裹坐标x + 22,self.包裹坐标y + 69 + 32
		self.身体格子[4].x,self.身体格子[4].y = self.包裹坐标x + 22,self.包裹坐标y + 69 + 64
		self.身体格子[5].x,self.身体格子[5].y = self.包裹坐标x + 22 + 32,self.包裹坐标y + 69 + 32
		self.身体格子[6].x,self.身体格子[6].y = self.包裹坐标x + 196,self.包裹坐标y + 69 + 32
		self.身体格子[7].x,self.身体格子[7].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69 + 32
		self.身体格子[8].x,self.身体格子[8].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69 + 64
		self.身体格子[9].x,self.身体格子[9].y = self.包裹坐标x + 196,self.包裹坐标y + 69
		self.身体格子[10].x,self.身体格子[10].y = self.包裹坐标x + 196 + 32,self.包裹坐标y + 69

		self.身体装扮格子[1].x,self.身体装扮格子[1].y = self.包裹坐标x + 157,self.包裹坐标y + 93
		self.身体装扮格子[2].x,self.身体装扮格子[2].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 93
		self.身体装扮格子[3].x,self.身体装扮格子[3].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 93
		self.身体装扮格子[4].x,self.身体装扮格子[4].y = self.包裹坐标x + 157,self.包裹坐标y + 94 + 33
		self.身体装扮格子[5].x,self.身体装扮格子[5].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 94 + 33
		self.身体装扮格子[6].x,self.身体装扮格子[6].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 94 + 33
		self.身体装扮格子[7].x,self.身体装扮格子[7].y = self.包裹坐标x + 157,self.包裹坐标y + 95 + 66
		self.身体装扮格子[8].x,self.身体装扮格子[8].y = self.包裹坐标x + 157 + 33,self.包裹坐标y + 95 + 66
		self.身体装扮格子[9].x,self.身体装扮格子[9].y = self.包裹坐标x + 157 + 66,self.包裹坐标y + 95 + 66

		local n = 0
		for i = 1, 4 do
			for j = 1, 8 do
				n = n + 1
				self.子夹组[1].格子[n].x,self.子夹组[1].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[2].格子[n].x,self.子夹组[2].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[3].格子[n].x,self.子夹组[3].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
				self.子夹组[4].格子[n].x,self.子夹组[4].格子[n].y = j * 30 + self.包裹坐标x - 12, i * 30 + self.包裹坐标y + 201
				self.子夹组[5].格子[n].x,self.子夹组[5].格子[n].y = j * 30 + self.包裹坐标x - 12,i * 30 + self.包裹坐标y + 201
			end
		end

		n = 0
		for i = 1, 4 do
			for j = 1, 7 do
				n = n + 1
				self.装扮格子组[n].x,self.装扮格子组[n].y = j * 30 + self.包裹坐标x - 4,i * 30 + self.包裹坐标y + 230
			end
		end

		self.触发移动包围盒:置坐标(self.包裹坐标x, self.包裹坐标y + 8)
		self.触发包围盒:置坐标(self.包裹坐标x + 10, self.包裹坐标y + 10)

	end

end

--=============================================================================--
-- ■ 检测点()
--=============================================================================--
function 窗口_角色包裹类:检测点()

	--if (self.事件激活) then
	--	self.可移动 = false
	--else
		self.可移动 = true
	--end

	if (self.可视 and self.包裹关闭按钮:是否有焦点() == false  ) then
		if (self.触发移动包围盒:检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
			return true
		end
	end

	return false

end

--=============================================================================--
-- ■ 检测点_全局()
--=============================================================================--
function 窗口_角色包裹类:检测点_全局()

	if (self.触发包围盒:检查点(Q_鼠标坐标.x,Q_鼠标坐标.y) or self.触发移动包围盒:检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
		return  true
	end

	return false
end

--=============================================================================--
-- ■ 置焦点()
--=============================================================================--
function 窗口_角色包裹类:置焦点(是否焦点)
	self.焦点 = 是否焦点
end

--=============================================================================--
-- ■ 初始移动()
--=============================================================================--
function 窗口_角色包裹类:初始移动()

	self.最后激活时间 = 引擎.取时间戳()

	--if (self.事件激活 == false ) then
		Q_屏幕.移动焦点窗口 = true
	--end


	if (self.可视 and self.焦点 and self.可移动) then
		self.包裹偏移x = Q_鼠标坐标.x - self.包裹坐标x
		self.包裹偏移y = Q_鼠标坐标.y - self.包裹坐标y
	end

end
--=============================================================================--
-- ■ 切换到子夹
--=============================================================================--
function 窗口_角色包裹类:自动子夹(道具ID)

	if (Q_游戏道具组[道具ID].总类 == "装备") then
		Q_包裹窗口:切换到子夹(1)
	elseif (Q_游戏道具组[道具ID].总类 == "消耗品") then
		Q_包裹窗口:切换到子夹(2)
	elseif (Q_游戏道具组[道具ID].总类 == "材料") then
		Q_包裹窗口:切换到子夹(3)
	elseif (Q_游戏道具组[道具ID].总类 == "副职业") then
		Q_包裹窗口:切换到子夹(4)
	elseif (Q_游戏道具组[道具ID].总类 == "任务") then
		Q_包裹窗口:切换到子夹(5)
	end

end

--=============================================================================--
-- ■ 切换到子夹
--=============================================================================--
function 窗口_角色包裹类:切换到子夹(索引)

	for n=1,table.getn(self.子夹组 ) do
		self.子夹组 [n].状态 = 1
	end

	self.子夹组 [索引].状态 = 3
	self.当前选择夹 = self.子夹组 [索引]
	self.子夹ID = 索引

end

--=============================================================================--
-- ■ 重置纸娃娃
--=============================================================================--
function 窗口_角色包裹类:重置纸娃娃()

	for n=1,table.getn(self.纸娃娃动画组 ) do
		self.纸娃娃动画组[n].动画:重置()
	end

end

--=============================================================================--
-- ■ 归还道具
--=============================================================================--

function 窗口_角色包裹类:归还道具(道具ID,数量)

	if (Q_游戏道具组[道具ID].总类 == "装备"and self:取物品数(子夹ID) < 32) then
		self:增加物品old(1,道具ID,数量)
	elseif (Q_游戏道具组[道具ID].总类 == "消耗品" and self:取物品数(子夹ID) < 32) then
		self:增加物品old(2,道具ID,数量)
	elseif (Q_游戏道具组[道具ID].总类 == "材料" and self:取物品数(子夹ID) < 32) then
		self:增加物品old(3,道具ID,数量)
	elseif (Q_游戏道具组[道具ID].总类 == "任务" and self:取物品数(子夹ID) < 32) then
		self:增加物品old(4,道具ID,数量)
	elseif (Q_游戏道具组[道具ID].总类 == "装扮" and self:取装扮物品数() < 28) then
		self:增加装扮物品(道具ID)
	end

end

--=============================================================================--
-- ■ 增加装扮物品()
--=============================================================================--
function 窗口_角色包裹类:增加装扮物品(道具ID)

	if (self:取装扮物品数() == 28 ) then
		Q_信息框:提示(-1,-1,"\n        包裹已满！        \n","确认" )

		return false
	end

	for n=1, 28 do
	     if ( self.装扮格子组[n].道具.id == 0) then
		    self.装扮格子组[n]:置道具(道具ID,true,1)
			self.模式 = "装扮"
			return true
	     end
	end

end

--=============================================================================--
-- ■ 增加装扮物品new()
--=============================================================================--
function 窗口_角色包裹类:增加装扮物品new(道具ID,道具id)

	if (self:取装扮物品数() == 28 ) then
		Q_信息框:提示(-1,-1,"\n        包裹已满！        \n","确认" )

		return false
	end

	for n=1, 28 do
	     if ( self.装扮格子组[n].道具.id == 0) then
		    self.装扮格子组[n]:置道具(道具id,true,1)
			self.模式 = "装扮"
			return true
	     end
	end

end
--=============================================================================--
-- ■ 取装扮物品数()
--=============================================================================--
function 窗口_角色包裹类:取装扮物品数()

	local n1 = 0

		for n=1, 28 do
			if (Q_鼠标id == 0 and  self.装扮格子组[n].道具.id  ~= 0) then
				n1 = n1 + 1
			end
            end

	return  n1

end

--=============================================================================--
-- ■ 取物品数()
--=============================================================================--
function 窗口_角色包裹类:取物品数(子夹ID)

	local n1 = 0

		for n=1, 32 do
			if ( Q_鼠标道具.id == 0 and self.子夹组[子夹ID].格子[n].道具.id  ~= 0) then
				n1 = n1 + 1
			end
        end

	return  n1

end

--=============================================================================--
-- ■ 增加物品()
--=============================================================================--
function 窗口_角色包裹类:增加物品new(子夹ID,道具ID,道具数量,是否自动切换子夹,物品id)

     if (self:取物品数(子夹ID) == 32 ) then
		Q_信息框:提示(-1,-1,"\n        包裹已满！        \n","确认" )

		return false
     end

	if (是否自动切换子夹 == nil or 是否自动切换子夹) then
		self:切换到子夹(子夹ID)
	end

	local 已经存在 = false
	local 剩余数量 = 0

	if (道具ID.总类 == "装备") then
		for n=1, 32 do
		     if ( self.子夹组[子夹ID].格子[n].道具.id == 0) then
			   self.子夹组[子夹ID].格子[n]:置道具(物品id,false,1)
			   return true
		     end
		end

	else

		for n=1, 32 do
		     if ( self.子夹组[子夹ID].格子[n].道具.id == 物品id ) then
			    剩余数量 = self.子夹组[子夹ID].格子[n].道具.数量 + 道具数量 - 1000
			   if (剩余数量 <= 0) then
				已经存在 = true
				self.子夹组[子夹ID].格子[n].道具.数量 = self.子夹组[子夹ID].格子[n].道具.数量 + 道具数量

				return true
			   end

		     end
		end

		if ( 已经存在 == false ) then
			for n=1, 32 do
			     if ( self.子夹组[子夹ID].格子[n].道具.id == 0) then
				    self.子夹组[子夹ID].格子[n]:置道具(物品id,false,道具数量)
				    return true
			     end
			end

		end

	end

end

--=============================================================================--
-- ■ 增加物品()
--=============================================================================--
function 窗口_角色包裹类:增加物品old(子夹ID,道具ID,道具数量,是否自动切换子夹)

	--print(self:取物品数(子夹ID))

    if (self:取物品数(子夹ID) == 32 ) then
		Q_信息框:提示(-1,-1,"\n        包裹已满！        \n","确认" )

		return false
    end

	if (是否自动切换子夹 == nil or 是否自动切换子夹) then
		self:切换到子夹(子夹ID)
	end

	local 已经存在 = false
	local 剩余数量 = 0

	if (Q_游戏道具组[道具ID].总类 == "装备") then
		for n=1, 32 do
		     if ( self.子夹组[子夹ID].格子[n].道具.id == 0) then
			   self.子夹组[子夹ID].格子[n]:置道具(道具ID,true,1)
			   return true
		     end
		end

	else

		for n=1, 32 do
		     if ( self.子夹组[子夹ID].格子[n].道具.id == 道具ID ) then
			    剩余数量 = self.子夹组[子夹ID].格子[n].道具.数量 + 道具数量 - 1000
			   if (剩余数量 <= 0) then
				已经存在 = true
				self.子夹组[子夹ID].格子[n].道具.数量 = self.子夹组[子夹ID].格子[n].道具.数量 + 道具数量

				return true
			   end

		     end
		end

		if ( 已经存在 == false ) then
			for n=1, 32 do
			     if ( self.子夹组[子夹ID].格子[n].道具.id == 0) then
				    self.子夹组[子夹ID].格子[n]:置道具(道具ID,true,道具数量)
				    return true
			     end
			end

		end

	end

end

--=============================================================================--
-- ■ 显示包裹装备属性
--=============================================================================--
function 窗口_角色包裹类:显示包裹装备属性()

	local 显示偏移 = 0
	local 显示偏移Y = 0

	if(Q_屏幕.鼠标窗口全id ~= 0 and Q_界面_窗口_数组[Q_屏幕.鼠标窗口全id].标识 == "包裹窗口")then

		if (self.模式 == "物品") then

			for n=1,32 do

				if (self.当前选择夹.格子[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and self.当前选择夹.格子[n].道具.id ~= 0) then

					if (Q_鼠标坐标.x < 320) then
						显示偏移 = 25
					else
						显示偏移 = - self.当前选择夹.格子[n].风格提示.宽度 - 20
					end

					显示偏移Y = self.当前选择夹.格子[n].y-self.当前选择夹.格子[n].风格提示.高度/2

					显示风格提示(self.当前选择夹.格子[n].x + 显示偏移,显示偏移Y,
									self.当前选择夹.格子[n].风格提示.风格文字组,
									self.当前选择夹.格子[n].风格提示.宽度,
									self.当前选择夹.格子[n].风格提示.高度,200,1,true,3)
					return
				end

			end

			for n=1,10 do

				if (self.身体格子[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and self.身体格子[n].道具.id ~= 0) then

					if (Q_鼠标坐标.x < 320) then
						显示偏移 = 25
					else
						显示偏移 = - self.身体格子[n].风格提示.宽度 - 20
					end

					显示偏移Y = self.身体格子[n].y-self.身体格子[n].风格提示.高度/2
					if (显示偏移Y < 2) then
						显示偏移Y = 2
					end

					显示风格提示(self.身体格子[n].x + 显示偏移,显示偏移Y,
									self.身体格子[n].风格提示.风格文字组,
									self.身体格子[n].风格提示.宽度,
									self.身体格子[n].风格提示.高度,200,1,true,3)
					return
				end

			end

		elseif (self.模式 == "装扮") then

			for n=1,28 do

				if (self.装扮格子组[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and self.装扮格子组[n].道具.id ~= 0) then

					if (Q_鼠标坐标.x < 320) then
						显示偏移 = 25
					else
						显示偏移 = - self.装扮格子组[n].风格提示.宽度 - 20
					end

					显示偏移Y = self.装扮格子组[n].y-self.装扮格子组[n].风格提示.高度/2

					显示风格提示(self.装扮格子组[n].x + 显示偏移,显示偏移Y,
									self.装扮格子组[n].风格提示.风格文字组,
									self.装扮格子组[n].风格提示.宽度,
									self.装扮格子组[n].风格提示.高度,200,1,true,3)
					return
				end

			end

			for n=1,table.getn(self.身体装扮格子)	do

				if (self.身体装扮格子[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and self.身体装扮格子[n].道具.id ~= 0) then

					if (Q_鼠标坐标.x < 320) then
						显示偏移 = 25
					else
						显示偏移 = - self.身体装扮格子[n].风格提示.宽度 - 20
					end

					显示偏移Y = self.身体装扮格子[n].y-self.身体装扮格子[n].风格提示.高度/2

					显示风格提示(self.身体装扮格子[n].x + 显示偏移,显示偏移Y,
									self.身体装扮格子[n].风格提示.风格文字组,
									self.身体装扮格子[n].风格提示.宽度,
									self.身体装扮格子[n].风格提示.高度,200,1,true,3)
					return
				end

			end

		end
	end
end
--=============================================================================--
-- ■ 销毁
--=============================================================================--
function 窗口_角色包裹类:销毁()

	self.纸娃娃动画组 = nil
	self.纸娃娃动画组 = {}

	self.包裹关闭按钮:销毁()
	self.包裹整理按钮:销毁()

	self.包裹金币按钮:销毁()
	self.包裹商城按钮:销毁()

	for n=1,table.getn(self.子夹组 ) do
		for s=1,32 do
			self.子夹组[n].格子[s] = nil
		end
	end

	for n=1,35 do
		self.装扮格子组[n] =  nil
	end

	for n=1,9 do
		self.身体装扮格子[n]= nil
	end

	for n=1,10 do
		self.身体格子[n]= nil
	end

end

--=============================================================================--
-- @作者: 白狐剑仙。
-- @邮箱: 1733450036@qq.com
-- @创建时间:   2017-08-01 12:45:25
-- @最后修改来自: 白狐剑仙。
-- @Last Modified time: 2017-11-21 18:19:32
--=============================================================================--
扩展_游戏地图 = class()
--=============================================================================--
-- ■ 构造函数
--=============================================================================--
function 扩展_游戏地图:初始化()

	self.地图_纹理组 = {}
	self.数据_第三层 = {}
	self.数据_第二层 = {}
	self.数据_地表层 = {}
	self.数据_最顶层 = {}
	self.矩形_障碍层 = {}
	self.地图_事件箱 = {}

	self.特效_最顶层 = {}

	self.地图_门点组 = {}

	self.清关 =  false

	self.怪物数量 = 0
	self.怪物剩余数量 = 0

	self.关卡地图信息组 = {}

	self.地图名称 = ""

end

--=============================================================================--
-- ■ 关卡检测
--=============================================================================--
function 扩展_游戏地图:关卡检测()

	if ( Q_地图配置.类型 == "地下城" ) then

		self.怪物剩余数量 = self.怪物剩余数量 - 1

		if ( self.怪物剩余数量<= 0 ) then

			self.清关 = true

			--Q_地图.关卡地图信息组[Q_地图配置.标识].清关 = true

			for n=1 ,table.getn(self.地图_门点组) do
				self.地图_门点组[n]:通行()
			end

		end

	end

end

--=============================================================================--
-- ■ 更新
--=============================================================================--
function 扩展_游戏地图:更新()

	for n=1,table.getn(self.地图_门点组) do
		self.地图_门点组[n]:更新()
	end

	for n=1 ,table.getn(self.地图_事件箱) do

		self.地图_事件箱[n].包围盒:置坐标(self.地图_事件箱[n].x ,self.地图_事件箱[n].y)

		if ((( Q_地图配置.类型 == "地下城" and self.清关 == false) or  ( Q_地图配置.类型 ~= "地下城" )) and  self.地图_事件箱[n].包围盒:检查点(Q_主角.坐标.x,Q_主角.地平线) and Q_主角:是否在攻击状态() == false ) then

			if (self.地图_事件箱[n].map ~= nil) then

				if (self.地图_事件箱[n].map == "艾尔文关卡") then
					Q_主角:改变动作( "静止")
					--背景音效:停止()
					--Q_背景音乐名称 = ""
					--Q_地图配置.音乐 = ""
					Q_关卡选择 = 界面_关卡选择.创建( self.地图_事件箱[n].map_x, self.地图_事件箱[n].map_y,- Q_主角.方向)
					Q_游戏进度 = "关卡选择"
					Q_屏幕遮罩时间 =150
				else
					Q_主角.坐标.x = self.地图_事件箱[n].map_x
					Q_主角.坐标.y = self.地图_事件箱[n].map_y
					--for n=1,table.getn(Q_屏幕APC组) do

						--Q_屏幕APC组[n].坐标.x = Q_主角.坐标.x
						--Q_屏幕APC组[n].坐标.y = Q_主角.坐标.y

					--end
					Q_地图:加载地图(self.地图_事件箱[n].map)
				end

				break
			end

		end

	end

end

--=============================================================================--
-- ■ 显示
--=============================================================================--
function 扩展_游戏地图:显示()

	for n=1,table.getn(self.数据_第三层) do
		self.数据_第三层[n].精灵:置坐标_高级(self.数据_第三层[n].显示x+Q_画面偏移.x  * 0.7 ,self.数据_第三层[n].显示y+Q_画面偏移.y,0,self.数据_第三层[n].翻转,1)
		self.数据_第三层[n].精灵:显示()
	end

	for n=1,table.getn(self.数据_第二层) do
		self.数据_第二层[n].精灵:置坐标_高级(self.数据_第二层[n].显示x+Q_画面偏移.x  * 0.8  ,self.数据_第二层[n].显示y+Q_画面偏移.y,0,self.数据_第二层[n].翻转,1)
		self.数据_第二层[n].精灵:显示()
	end


	for n=1,table.getn(self.数据_地表层) do
		self.数据_地表层[n].精灵:置坐标_高级(self.数据_地表层[n].显示x+Q_画面偏移.x   ,self.数据_地表层[n].显示y+Q_画面偏移.y,0,self.数据_地表层[n].翻转,1)
		self.数据_地表层[n].精灵:显示()
	end

end

--=============================================================================--
-- ■ 显示
--=============================================================================--
function 扩展_游戏地图:显示顶层()

	for n=1,table.getn(self.数据_最顶层) do
		self.数据_最顶层[n].精灵:置坐标_高级(self.数据_最顶层[n].显示x+Q_画面偏移.x   ,self.数据_最顶层[n].显示y+Q_画面偏移.y,0,self.数据_最顶层[n].翻转,1)
		self.数据_最顶层[n].精灵:显示()
	end

	for n=1,table.getn(self.特效_最顶层) do
		self.特效_最顶层[n]:显示()
	end

	for n=1,table.getn(self.矩形_障碍层) do
		self.矩形_障碍层[n].包围盒:置坐标(self.矩形_障碍层[n].x+Q_画面偏移.x,self.矩形_障碍层[n].y+Q_画面偏移.y)
		if(Q_调试)then
			self.矩形_障碍层[n].包围盒:显示(蓝)
		end
	end


	if (Q_调试) then
		for n=1 ,table.getn(self.地图_事件箱) do
			self.地图_事件箱[n].包围盒:置坐标(self.地图_事件箱[n].x + Q_画面偏移.x,self.地图_事件箱[n].y + Q_画面偏移.y)
			self.地图_事件箱[n].包围盒:显示(红)
		end
	end

end

---=============================================================================--
-- ■ 清理旧地图数据()
--==============================================================================--
function 扩展_游戏地图:清理旧地图数据()

	for n=1,table.getn(self.地图_纹理组) do
		self.地图_纹理组[n].图片 = nil
	end

	for n=1,table.getn(self.数据_第三层) do
		self.数据_第三层[n].精灵:释放()
	end

	for n=1,table.getn(self.数据_第二层) do
		self.数据_第二层[n].精灵:释放()
	end

	for n=1,table.getn(self.数据_地表层) do
		self.数据_地表层[n].精灵:释放()
	end

	for n=1,table.getn(self.数据_最顶层) do
		self.数据_最顶层[n].精灵:释放()
	end

	for n=1,table.getn(self.特效_最顶层) do
		self.特效_最顶层[n]:释放()
	end

--销毁屏幕物件类
	for n=table.getn(Q_屏幕物件组),1,-1 do

		if ( Q_屏幕物件组[n].标识类型 == "屏幕特效" or   Q_屏幕物件组[n].标识类型 == "屏幕单帧特效" or   Q_屏幕物件组[n].标识类型 == "地图物件"
			or   Q_屏幕物件组[n].标识类型 == "游戏NPC"  or   Q_屏幕物件组[n].标识类型 == "屏幕怪物"   or   Q_屏幕物件组[n].标识类型 ==  "地图门点"
			or   Q_屏幕物件组[n].标识类型 ==  "屏幕子弹"  or   Q_屏幕物件组[n].标识类型 == "地面掉落物") then

			--Q_屏幕物件组[n]:释放()
			table.remove(Q_屏幕物件组,n,1)

		end

	end
--销毁地面物品组(因为地面物品组不属于屏幕物件组销毁范围，因此加上此句)
	for n=table.getn(Q_地面物品组),1,-1  do
		--Q_地面物品组[n]:释放()
		table.remove(Q_地面物品组,n,1)
	end


	self.地图_纹理组 = nil
	self.数据_第三层 = nil
	self.数据_第二层 = nil
	self.数据_地表层 = nil
	self.矩形_障碍层 = nil
	self.地图_事件箱 = nil
	self.数据_最顶层 = nil
	self.特效_最顶层 = nil

	Q_地图物件组 = nil
	Q_屏幕特效组 = nil
	Q_屏幕NPC组 = nil
	Q_屏幕怪物组 = nil

	self.地图_门点组 = nil

	self.地图_纹理组 = {}
	self.数据_第三层 = {}
	self.数据_第二层 = {}
	self.数据_地表层 = {}
	self.矩形_障碍层 = {}
	self.地图_事件箱 = {}
	self.数据_最顶层 = {}
	self.特效_最顶层 = {}
	Q_地图物件组 = {}
	Q_屏幕特效组 = {}
	Q_屏幕NPC组 = {}
	Q_屏幕怪物组 = {}
	self.地图_门点组 = {}


	Q_屏幕NPC组 = nil
	Q_屏幕NPC组 = {}

	Q_屏幕怪物组 = nil
	Q_屏幕怪物组 = {}

--	Q_屏幕子弹组 = nil
--	Q_屏幕子弹组 = {}


	--if (Q_NPC菜单.是否显示 ) then
	--	Q_NPC菜单:关闭()
	--end

	--if (Q_NPC对话框.可视 ) then
	--	Q_NPC对话框:关闭()
	--end

	--if (Q_商店窗口.可视 ) then
	--	Q_商店窗口:开关()
	--end

	--if (Q_分解强化窗口.可视 ) then
		--Q_分解强化窗口:开关()
	--end

	--if (Q_信息框.可视 ) then
	--	Q_信息框.可视 = false
	--end

	--Q_游戏鼠标.模式 = "普通"

	self.清关 = false

	--for n=1,table.getn(Q_地图.关卡地图信息组) do

	--	Q_地图.关卡地图信息组[n].格子.可视 = false
	--	Q_地图.关卡地图信息组[n].格子.焦点 = false
	---	Q_地图.关卡地图信息组[n].格子.状态 = "普通"

	--end

end

---=============================================================================--
-- ■ 加载地图()
--==============================================================================--
function 扩展_游戏地图:加载地图(地图名称)

	local 地图文件 = Q_目录.. [[\Dat\map\]] .. 地图名称 .. [[.emhmap]]
	local 关卡地图文件 =  Q_目录.. [[\Dat\map\地下城\]] .. 地图名称 .. [[.emhmap]]

	if(引擎.文件是否存在(地图文件) == false and 引擎.文件是否存在(关卡地图文件) == false) then
		print("没有找到地图文件")
		return
	end

	self.地图名称 = 地图名称

	self:清理旧地图数据()


	if(引擎.文件是否存在(地图文件) == true)then

		local 文件号 = assert(io.open(地图文件, "r"))
		local 全部文本 = 文件号:read("*all")
		文件号:close()

		local  首次分割 = 分割文本(全部文本, "*")
		local  分割成员数 = table.getn(首次分割)

		if (  分割成员数 > 0 ) then
			self:读地图基本数据(首次分割[1])
		end

		if (  分割成员数 > 1 ) then
			self:读地图基础层数据(self.数据_第三层,首次分割[2])
		end

		if (  分割成员数 > 2 ) then
			self:读地图基础层数据(self.数据_第二层,首次分割[3])
		end

		if (  分割成员数 > 3 ) then
			self:读地图基础层数据(self.数据_地表层,首次分割[4])
		end

		if (  分割成员数 > 4 ) then
			self:读地图物件层数据(首次分割[5])
		end

		if (  分割成员数 > 5 ) then
			self:读地图基础层数据(self.数据_最顶层,首次分割[6])
		end

		if (  分割成员数 > 6 ) then
			self:读地图障碍矩形层数据(首次分割[7])
		end

		if ( Q_地图脚本组[地图名称] ~= nil ) then
			Q_地图脚本组[地图名称].Main()
		end

		Q_主角.状态 = "静止"
		Q_主角.跳跃攻击 = false

		Q_屏幕遮罩时间 =150
		--Q_游戏进度 = "游戏开始"

		for n=1 ,table.getn(self.地图_事件箱) do
			self.地图_事件箱[n].包围盒 = require ("gge包围盒") (self.地图_事件箱[n].x,self.地图_事件箱[n].y,self.地图_事件箱[n].w,self.地图_事件箱[n].h)
		end

		if(Q_地图脚本组[地图名称] ~= nil and Q_背景音乐名称 ~= Q_地图配置.音乐 ) then

			if ( Q_背景音乐名称 ~= "" ) then
				self.背景音效:停止()
			end
			self.背景音效 = require("gge音效类")(Q_目录..[[\Dat\Audio\music\]] .. Q_地图配置.音乐)
			self.背景音效:播放_高级(Q_地图配置.音量,0,nil,true)
			Q_背景音乐名称 = Q_地图配置.音乐

		end

		if ( Q_地图配置.地面 == "草地" or Q_地图配置.地面 == "雪地") then
			Q_主角.脚步声 = true
		else
			Q_主角.脚步声 = false
		end

		self:更新关卡地图信息()

		if (Q_地图配置.类型 == "地下城") then
			--Q_小地图.地下城模式 = false
		else
			--Q_小地图.地下城模式 = false
		end

	elseif(引擎.文件是否存在(关卡地图文件) == true)then

		local 文件号 = assert(io.open(关卡地图文件, "r"))
		local 全部文本 = 文件号:read("*all")
		文件号:close()

		local  首次分割 = 分割文本(全部文本, "*")
		local  分割成员数 = table.getn(首次分割)

		if (  分割成员数 > 0 ) then
			self:读地图基本数据(首次分割[1])
		end

		if (  分割成员数 > 1 ) then
			self:读地图基础层数据(self.数据_第三层,首次分割[2])
		end

		if (  分割成员数 > 2 ) then
			self:读地图基础层数据(self.数据_第二层,首次分割[3])
		end

		if (  分割成员数 > 3 ) then
			self:读地图基础层数据(self.数据_地表层,首次分割[4])
		end

		if (  分割成员数 > 4 ) then
			self:读地图物件层数据(首次分割[5])
		end

		if (  分割成员数 > 5 ) then
			self:读地图基础层数据(self.数据_最顶层,首次分割[6])
		end

		if (  分割成员数 > 6 ) then
			self:读地图障碍矩形层数据(首次分割[7])
		end

		if ( Q_地图脚本组[地图名称] ~= nil ) then
			Q_地图脚本组[地图名称].Main()
		end

		Q_主角.状态 = "静止"
		Q_主角.跳跃攻击 = false

		Q_屏幕遮罩时间 =150
		--Q_游戏进度 = "游戏开始"

		for n=1 ,table.getn(self.地图_事件箱) do
			self.地图_事件箱[n].包围盒 = require ("gge包围盒") (self.地图_事件箱[n].x,self.地图_事件箱[n].y,self.地图_事件箱[n].w,self.地图_事件箱[n].h)
		end


		if( Q_地图脚本组[地图名称] ~= nil and Q_背景音乐名称 ~= Q_地图配置.音乐 ) then

			if ( Q_背景音乐名称 ~= "" ) then
				背景音效:停止()
			end
			背景音效 = require("gge音效类")(Q_目录..[[\Dat\Audio\music\地下城\]] .. Q_地图配置.音乐)
			背景音效:播放_高级(Q_地图配置.音量,0,nil,true)
			Q_背景音乐名称 = Q_地图配置.音乐
			--print(Q_目录..[[\Dat\Audio\music\地下城\]] .. Q_地图配置.音乐)

		end

		if ( Q_地图配置.地面 == "草地" or Q_地图配置.地面 == "雪地") then
			Q_主角.脚步声 = true
		else
			Q_主角.脚步声 = false
		end

		self:更新关卡地图信息()

		if (Q_地图配置.类型 == "地下城") then
			--Q_小地图.地下城模式 = false
		else
			--Q_小地图.地下城模式 = false
		end
	end

end

---=============================================================================--
-- ■ 更新关卡地图信息()
--==============================================================================--
function 扩展_游戏地图:更新关卡地图信息()

	if ( Q_地图配置.类型 == "地下城") then

		self.怪物数量 = table.getn(Q_屏幕怪物组)
		self.怪物剩余数量 = self.怪物数量

		--Q_地图.关卡地图信息组[Q_地图配置.标识].格子:激活(573,60,true)
		--self.清关 =  Q_地图.关卡地图信息组[Q_地图配置.标识].清关

	end

end

---=============================================================================--
-- ■ 取缓存纹理(标识)
--==============================================================================--
function 扩展_游戏地图:取缓存纹理(标识)

	local 临时逻辑值 = false

	for n=1, table.getn(self.地图_纹理组 ) do
		if ( self.地图_纹理组 [n].文件标识 == 标识 )  then
			return self.地图_纹理组 [n].图片
		end
	end

	local 临时纹理 = {文件标识 = 标识, 图片 = require ("gge纹理类")(Q_目录.. 标识) }

	table.insert(self.地图_纹理组,临时纹理)

	return 临时纹理.图片

end

---=============================================================================--
-- ■ 读地图基本数据
--==============================================================================--
function 扩展_游戏地图:读地图基本数据(文本数据)

	local  文本分组 = 分割文本(文本数据, "|")

	if ( table.getn(文本分组) == 1 ) then

		local 再分割文本组 = 分割文本 (文本分组[1],",")

		if ( table.getn(再分割文本组) == 2 ) then

			Q_地图宽度 = tonumber(再分割文本组[1])
			Q_地图高度 = tonumber(再分割文本组[2])

		end

	end

end

---=============================================================================--
-- ■ 读地图基础层数据()
--==============================================================================--
function 扩展_游戏地图:读地图基础层数据(层次,文本数据)

	local  文本分组 = 分割文本(文本数据, "|")
	local 临时图片 = 0
	local 元素数量= table.getn(文本分组)

	for n=1,元素数量 do

		local 再分割文本组 = 分割文本 (文本分组[n],",")

		if ( table.getn(再分割文本组) == 4 ) then
			层次[n]=
			{
				显示x= tonumber (再分割文本组 [1]),
				显示y= tonumber (再分割文本组 [2]),
				图片文件 =  再分割文本组 [3],
				翻转 = tonumber (再分割文本组 [4])
			}

			if ( 再分割文本组 [3] ~=  "" ) then
				临时图片 = self:取缓存纹理(再分割文本组 [3])
				层次[n].精灵 = require ("gge精灵类")(临时图片,0,0, 临时图片:取宽度(),临时图片:取高度())
				层次[n].精灵:置中心(取整_( 临时图片:取宽度()/2 ), 取整_(临时图片:取高度()/2))
			end

		end
	end
end

---=============================================================================--
-- ■ 读地图物件层数据()
--==============================================================================--
function 扩展_游戏地图:读地图物件层数据(文本数据)

	local 文本分组 = 分割文本(文本数据, "|")
	local 物件数量 =  table.getn (文本分组)
	local 临时物件信息 = {}

	for n=1,物件数量  do

		local 再分割文本组 = 分割文本 (文本分组[n],",")

		if ( table.getn(再分割文本组) == 7 ) then

			临时物件信息 =
			{
				显示x= tonumber (再分割文本组 [1]),
				显示y= tonumber (再分割文本组 [2]),
				图片文件 =  再分割文本组 [3],
				翻转 = tonumber (再分割文本组 [4]),
				中心点偏移_x =  tonumber (再分割文本组 [5]),
				中心点偏移_y =  tonumber (再分割文本组 [6]),
				中心点_x = tonumber (再分割文本组 [1]) + tonumber (再分割文本组 [5]),
				中心点_y =  tonumber (再分割文本组 [2]) + tonumber (再分割文本组 [6]),
				自动透明 =   tonumber (再分割文本组 [7])
			}

			if ( 临时物件信息.图片文件 ~=  "" ) then

				local 临时图片 = self:取缓存纹理(临时物件信息.图片文件)
				local 临时物件 = 扩展_地图物件.创建(临时物件信息,临时图片,n)

				table.insert(Q_地图物件组,临时物件)
				加入屏幕物件组(临时物件)

			end

		end

	end

end

---=============================================================================--
-- ■ 读地图障碍矩形层数据()
--==============================================================================--
function 扩展_游戏地图:读地图障碍矩形层数据(文本数据)

	local  文本分组 = 分割文本(文本数据, "|")
	local 临时图片 = 0
	local 元素数量= table.getn(文本分组)

	for n=1,元素数量 do

		local 再分割文本组 = 分割文本 (文本分组[n],",")

		if ( table.getn(再分割文本组) == 5 ) then

			self.矩形_障碍层 [n]  =
			{
				x = tonumber (再分割文本组 [1]),
				y =tonumber (再分割文本组 [2]),
				w =tonumber (再分割文本组 [3]),
				h =tonumber (再分割文本组 [4]),
				类型 = tonumber (再分割文本组 [5]),
				包围盒 = require ("gge包围盒")(tonumber (再分割文本组 [1]),tonumber (再分割文本组 [2]),tonumber (再分割文本组 [3]),tonumber (再分割文本组 [4]))
			}

			if (self.矩形_障碍层 [n].类型==1) then
				--self.矩形_障碍层[n].包围盒:置颜色(颜色_黄)
			else
				--self.矩形_障碍层[n].包围盒:置颜色(颜色_蓝)
			end

		end
	end

end

--=============================================================================--
-- ■ 是否可行
--=============================================================================--
function 扩展_游戏地图:是否可行(x,y)

	for n=1 , #Q_地图.矩形_障碍层  do

		if(Q_地图.矩形_障碍层[n].包围盒:检查点(x + Q_画面偏移.x,y  + Q_画面偏移.y )) then -- 接触到包围盒
			return false
		end

	end

	return  true

end

--=============================================================================--
-- ■ 销毁
--=============================================================================--
function 扩展_游戏地图:销毁()

	for n=1,table.getn(self.地图_纹理组) do
		self.地图_纹理组[n].图片 = nil
	end

	for n=1,table.getn(self.数据_第三层) do
		self.数据_第三层[n].精灵:释放()
	end

	for n=1,table.getn(self.数据_第二层) do
		self.数据_第二层[n].精灵:销毁()
	end

	for n=1,table.getn(self.数据_地表层) do
		self.数据_地表层[n].精灵:释放()
	end

	for n=1,table.getn(self.数据_最顶层) do
		self.数据_最顶层[n].精灵:释放()
	end

	for n=1,table.getn(self.特效_最顶层) do
		self.特效_最顶层[n]:释放()
	end

	self.地图_纹理组 = nil
	self.数据_第三层 = nil
	self.数据_第二层 = nil
	self.数据_地表层 = nil
	self.矩形_障碍层 = nil
	self.地图_事件箱 = nil
	self.数据_最顶层 = nil
	self.特效_最顶层 = nil
	self.地图_门点组 = nil


	self.地图_纹理组 = {}
	self.数据_第三层 = {}
	self.数据_第二层 = {}
	self.数据_地表层 = {}
	self.矩形_障碍层 = {}
	self.地图_事件箱 = {}
	self.数据_最顶层 = {}
	self.特效_最顶层 = {}
	self.地图_门点组 = {}

	背景音效:释放()

end
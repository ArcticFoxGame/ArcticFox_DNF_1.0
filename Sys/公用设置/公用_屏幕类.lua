--=============================================================================--
-- @作者: 白狐剑仙。
-- @邮箱: 1733450036@qq.com
-- @创建时间:   2017-08-01 12:45:25
-- @最后修改来自: 白狐剑仙。
-- @Last Modified time: 2017-11-22 22:52:20
--=============================================================================--
主屏幕类  = class()
--=============================================================================--
-- ■ 构造函数
--=============================================================================--
function 主屏幕类:初始化()

	self.底部UI精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/底部UI.png]],0,0,800,91)
	self.UI_底部快捷键精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏.png]],0,0,607,7)
	self.UI_底部lv精灵 = require ("gge精灵类")(Q_目录..[[/Dat/attacknum/L/11.png]],0,0,17,10)

	self.底部快捷键Q精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/Q.png]],0,0,7,7)
	self.底部快捷键W精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/W.png]],0,0,7,7)
	self.底部快捷键E精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/E.png]],0,0,7,7)
	self.底部快捷键R精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/R.png]],0,0,7,7)
	self.底部快捷键T精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/T.png]],0,0,7,7)
	self.底部快捷键Y精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/Y.png]],0,0,7,7)

	self.底部快捷栏精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/快捷栏/快捷栏格子.png]],0,0,28,28)

	self.主角hp精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/hp.png]],0,0,52,52)
	self.主角mp精灵 = require ("gge精灵类")(Q_目录..[[/Dat/UI/主屏幕UI/mp.png]],0,0,52,52)

	self.主角HP包围盒  = require ("gge包围盒")(13,523,56,56)
	self.主角MP包围盒  = require ("gge包围盒")(733,523,56,56)

	self.角色状态按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/状态按钮/]], 283, 561,"提示按钮","角色状态[M]")
	self.角色状态按钮.显示偏移.x = - 25
	self.角色状态按钮.显示偏移.y = - 33
	self.角色状态按钮.音效 = 鼠标经过按钮音效

	self.角色包裹按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/包裹按钮/]],309, 561,"提示按钮","角色包裹[I]")
	self.角色包裹按钮.显示偏移.x = -23
	self.角色包裹按钮.显示偏移.y = -33
	self.角色包裹按钮.音效 = 鼠标经过按钮音效

	self.角色技能按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/技能按钮/]],335, 561,"提示按钮","角色技能[K]")
	self.角色技能按钮.显示偏移.x = -25
	self.角色技能按钮.显示偏移.y = -33
	self.角色技能按钮.音效 = 鼠标经过按钮音效

	self.角色任务按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/任务按钮/]],361, 561,"提示按钮"," 角色任务 ")
	self.角色任务按钮.显示偏移.x = -20
	self.角色任务按钮.显示偏移.y = -33
	self.角色任务按钮.音效 = 鼠标经过按钮音效

	self.系统设置按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/设置按钮/]],387, 561,"提示按钮"," 系统设置 ")
	self.系统设置按钮.显示偏移.x = -20
	self.系统设置按钮.显示偏移.y = -33
	self.系统设置按钮.音效 = 鼠标经过按钮音效

	self.游戏菜单按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/游戏菜单/]],413, 561,"提示按钮","游戏菜单[ESC]")
	self.游戏菜单按钮.显示偏移.x = -25
	self.游戏菜单按钮.显示偏移.y = -33
	self.游戏菜单按钮.音效 = 鼠标经过按钮音效

	self.游戏商城按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/游戏商城/]],466, 561,"提示按钮"," 游戏商城 ")
	self.游戏商城按钮.显示偏移.x = -8
	self.游戏商城按钮.显示偏移.y = -33
	self.游戏商城按钮.音效 = 鼠标经过按钮音效

	self.技能类型1按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/技能类型1/]],267, 560,"提示按钮","技能扩展1")
	self.技能类型1按钮.显示偏移.x = -25
	self.技能类型1按钮.显示偏移.y = -33
	self.技能类型1按钮.音效 = 鼠标经过按钮音效

	self.技能类型2按钮 = 扩展_三层按钮.创建(Q_目录..[[/Dat/UI/主屏幕UI/技能类型2/]],519, 560,"提示按钮","技能扩展2")
	self.技能类型2按钮.显示偏移.x = -25
	self.技能类型2按钮.显示偏移.y = -33
	self.技能类型2按钮.音效 = 鼠标经过按钮音效

	for n=1,6 do
		Q_快捷技能格子[n] = 格子_技能格子.创建(538 + 30*(n-1),558 ,28,28,50+n,"快捷")
		Q_快捷技能格子[6+n] = 格子_技能格子.创建(538 + 30*(n-1),519 ,28,28,56+n,"快捷")
	end

	for n=1,6 do
		Q_快捷道具格子[n] = 格子_包裹格子.创建(85 + 30*(n-1),559,28,28,50+n,"快捷")
	end

	self.最顶气泡显示 = false

	self.风格提示= {风格文字组 = {},宽度 = 0,高度 = 0,x = 0,y = 0}

	--self.等级文字 = 扩展_精灵文字L.创建()

	--Q_NPC对话框 =  NPC对话框类.创建()
	--Q_NPC菜单 = NPC菜单.创建()
	--Q_动态血条 = UI_顶部动态血条类.创建()
	--Q_技能进度条 = UI_角色技能进度条.创建()

	Q_包裹窗口 = 窗口_角色包裹类.创建()
	Q_包裹窗口.排序ID = 1

	--Q_商店窗口 = 窗口_游戏商店类.创建()
	--Q_商店窗口.排序ID = 2

	Q_技能窗口 = 窗口_角色技能类.创建()
	Q_技能窗口.排序ID = 3


	self.窗口id = 0
	self.鼠标窗口全id = 0
	self.移动焦点窗口 = false

	Q_界面_窗口_数组 = {Q_包裹窗口,Q_技能窗口}--Q_包裹窗口,Q_商店窗口,

	self.窗口排序方法 = function(窗口a, 窗口b)
		if( 窗口a.最后激活时间 == 窗口b.最后激活时间) then
			return 窗口a.排序ID < 窗口b.排序ID
		else
			return 窗口a.最后激活时间 < 窗口b.最后激活时间
		end
	end

end

--=============================================================================--
-- ■ 更新
--=============================================================================--
function 主屏幕类:更新()

	self.最顶气泡显示 = false

	self:CD效果更新()

	--Q_信息框:更新()
	--Q_NPC对话框:更新()
	--Q_技能进度条:更新()
	--Q_动态血条:更新()

	for n=1,table.getn(Q_快捷技能格子) do
		Q_快捷技能格子[n]:更新()
	end
	for n=1,table.getn(Q_快捷道具格子) do
		Q_快捷道具格子[n]:更新()
	end

	self:快捷键按钮操作()

    self.角色状态按钮:更新()
	self.角色包裹按钮:更新()
	self.角色技能按钮:更新()
	self.角色任务按钮:更新()
	self.系统设置按钮:更新()
    self.游戏菜单按钮:更新()
    self.游戏商城按钮:更新()
	self.技能类型1按钮:更新()
    self.技能类型2按钮:更新()


	for n=1, #Q_界面_窗口_数组 do
		Q_界面_窗口_数组[n]:更新()
	end

--鼠标左右键逻辑
	if(引擎.鼠标按下(键_鼠标左)) then
		self:鼠标左键按下()
	end

	if(引擎.鼠标按下(键_鼠标右)) then
		self:鼠标右键按下()
	end

	if(引擎.鼠标弹起(键_鼠标左)) then
		self.移动焦点窗口 = false
	end

--窗口移动部分
    if(self.移动焦点窗口 == true) then
		Q_界面_窗口_数组[#Q_界面_窗口_数组]:开始移动()
    end
    self.窗口id = self:取鼠标所在窗口()
	self.鼠标窗口全id = self:取鼠标所在窗口(true)
	table.sort(Q_界面_窗口_数组,self.窗口排序方法)


--屏幕按钮逻辑
	if (self.角色包裹按钮:取是否单击()) then
		按钮按下音效:播放()
		if (Q_技能窗口.可视) then
			Q_技能窗口:开关()
		end
		--[[if (Q_商店窗口.可视) then
			Q_商店窗口:开关()
		end--]]
		Q_包裹窗口:开关()
	end

	if (self.角色技能按钮:取是否单击()) then
		按钮按下音效:播放()
		--if (Q_商店窗口.可视) then
		--	Q_商店窗口:开关()
		--end
		Q_技能窗口:开关()
	end


--主角属性更新
	for n = 1, 9 do
		if (Q_包裹窗口.身体格子[n].道具.id ~= 0)then
			Q_主角.武器 = Q_游戏道具组[Q_包裹窗口.身体格子[n].道具.id].子类
		else
			Q_主角.武器 = ""
		end--]]
	end



--主角风格提示
	if (self.主角HP包围盒:检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
		if (self.主角HP提示 == false) then
			self.主角HP提示 = true
		end
		self.最顶气泡显示 = true
	else
		self.主角HP提示 = false
	end

	if (self.主角HP提示 == true) then
		local 提示内容 = string.format("HP:%d/%d",Q_主角.角色属性.HP,Q_主角.角色属性.MAX_HP)
		self.风格提示.原始内容 = 提示内容
		self.风格提示.风格文字组, self.风格提示.宽度 , self.风格提示.高度 = 格式化文字 (文字,self.风格提示.原始内容,1)
		self.风格提示.x = 5
		self.风格提示.y = 480
	end

	if (self.主角MP包围盒:检查点(Q_鼠标坐标.x,Q_鼠标坐标.y)) then
		if (self.主角MP提示 == false) then
			self.主角MP提示 = true
		end
		self.最顶气泡显示 = true
	else
		self.主角MP提示 = false
	end

	if (self.主角MP提示 == true) then
		local 提示内容 = string.format("MP:%d/%d",Q_主角.角色属性.MP,Q_主角.角色属性.MAX_MP)
		self.风格提示.原始内容 = 提示内容
		self.风格提示.风格文字组, self.风格提示.宽度 , self.风格提示.高度 = 格式化文字 (文字,self.风格提示.原始内容,1)
		self.风格提示.x = 780 - self.风格提示.宽度
		self.风格提示.y = 480
	end

end

--=============================================================================--
-- ■ 显示
--=============================================================================--
function 主屏幕类:显示()

	self.底部UI精灵:显示(0,510)

	self.UI_底部lv精灵:显示(15,585)

	self.底部快捷栏精灵:显示(537 + 1,519 + 1)
	self.底部快捷栏精灵:显示(567 + 1,519 + 1)
	self.底部快捷栏精灵:显示(597 + 1,519 + 1)
	self.底部快捷栏精灵:显示(627 + 1,519 + 1)
	self.底部快捷栏精灵:显示(657 + 1,519 + 1)
	self.底部快捷栏精灵:显示(687 + 1,519 + 1)

	for n=1,table.getn(Q_快捷道具格子) do
		Q_快捷道具格子[n]:显示()
	end
	for n=1,table.getn(Q_快捷技能格子) do
		Q_快捷技能格子[n]:显示()
	end

	self.底部快捷键Q精灵:显示(558 + 1,540 + 1)
	self.底部快捷键W精灵:显示(588 + 1,540 + 1)
	self.底部快捷键E精灵:显示(618 + 1,540 + 1)
	self.底部快捷键R精灵:显示(648 + 1,540 + 1)
	self.底部快捷键T精灵:显示(678 + 1,540 + 1)
	self.底部快捷键Y精灵:显示(708 + 1,540 + 1)

	self.UI_底部快捷键精灵:显示(108,580)

	--self.等级文字:显示(Q_主角.角色属性.等级,35,585,12,11,255,0)


	self.角色状态按钮:显示()
	self.角色包裹按钮:显示()
	self.角色技能按钮:显示()
	self.角色任务按钮:显示()
	self.系统设置按钮:显示()
	self.游戏菜单按钮:显示()
    self.游戏商城按钮:显示()
    self.技能类型1按钮:显示()
    self.技能类型2按钮:显示()



	self.主角hp精灵:置区域 (0,(Q_主角.角色属性.MAX_HP - Q_主角.角色属性.HP) / Q_主角.角色属性.MAX_HP * 56,56,
							56 - (Q_主角.角色属性.MAX_HP -Q_主角.角色属性.HP) / Q_主角.角色属性.MAX_HP * 56)

	self.主角hp精灵:显示(13,524 + (Q_主角.角色属性.MAX_HP - Q_主角.角色属性.HP) / Q_主角.角色属性.MAX_HP * 56)

	self.主角mp精灵:置区域 (0,(Q_主角.角色属性.MAX_MP -Q_主角.角色属性.MP) / Q_主角.角色属性.MAX_MP * 56,56,
							56 - (Q_主角.角色属性.MAX_MP - Q_主角.角色属性.MP) / Q_主角.角色属性.MAX_MP * 56)

	self.主角mp精灵:显示(732,524 +(Q_主角.角色属性.MAX_MP - Q_主角.角色属性.MP) /Q_主角.角色属性.MAX_MP * 56)



	for n=1, #Q_界面_窗口_数组 do
		Q_界面_窗口_数组[n]:显示()
	end


	--Q_信息框:显示()


	--Q_NPC对话框:显示()
	--Q_NPC菜单:显示()

	--Q_动态血条:显示()

	if (Q_包裹窗口.可视) then
		Q_包裹窗口:显示包裹装备属性()
	end

	--if (Q_商店窗口.可视) then
	--	Q_商店窗口:显示商店装备属性()
	--end

	if (Q_技能窗口.可视) then
		Q_技能窗口:显示角色技能属性()
	end

	if (Q_鼠标技能.对象 ~= nil) then
		Q_鼠标技能.对象.精灵:显示(Q_鼠标坐标.x-14,Q_鼠标坐标.y-14)
	end

	if (Q_鼠标道具.id ~= 0) then
		Q_游戏道具组[Q_鼠标道具.id].精灵:置区域 (0 ,0, 28, 28)
		Q_游戏道具组[Q_鼠标道具.id].精灵:显示(Q_鼠标坐标.x-14,Q_鼠标坐标.y-14)
	end

	if (self.最顶气泡显示) then
		显示风格提示(self.风格提示.x,self.风格提示.y,self.风格提示.风格文字组,self.风格提示.宽度, self.风格提示.高度 ,200,1,"",nil)
	end

	for n=1,6 do
		if (Q_快捷道具格子[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and Q_快捷道具格子[n].道具.id ~= 0) then

			local 显示偏移 = 0
			if (Q_鼠标坐标.x < 320) then
				显示偏移 =  - Q_快捷道具格子[n].风格提示.宽度 /2
				if (Q_快捷道具格子[n].x + 显示偏移 < 0) then
					显示偏移 = -Q_快捷道具格子[n].x
				end

			else
				显示偏移 = - Q_快捷道具格子[n].风格提示.宽度 /2
			end

			显示风格提示(Q_快捷道具格子[n].x + 显示偏移,Q_快捷道具格子[n].y - Q_快捷道具格子[n].风格提示.高度-16,
							Q_快捷道具格子[n].风格提示.风格文字组,
							Q_快捷道具格子[n].风格提示.宽度,
							Q_快捷道具格子[n].风格提示.高度,200,1,true,3)
			break
		end
	end--]]

	for n=1,12 do

		if (Q_快捷技能格子[n].包围盒:检查点(Q_鼠标坐标.x, Q_鼠标坐标.y) and Q_快捷技能格子[n].技能 ~= nil) then

			local 显示偏移 = 0
			if (Q_鼠标坐标.x < 420) then
				显示偏移 = 28
			else
				显示偏移 = -Q_快捷技能格子[n].风格提示.宽度/2
			end

			显示风格提示(Q_快捷技能格子[n].坐标.x + 显示偏移,Q_快捷技能格子[n].坐标.y - Q_快捷技能格子[n].风格提示.高度-16,
							Q_快捷技能格子[n].风格提示.风格文字组,
							Q_快捷技能格子[n].风格提示.宽度 ,
							Q_快捷技能格子[n].风格提示.高度,200,1,true,3)
			break
		end
	end


	if (Q_调试) then
		self.主角HP包围盒:显示()
		self.主角MP包围盒:显示()
		--self.经验包围盒:显示()
	end
end

--=============================================================================--
-- ■ 取当前鼠标所在窗口()
--=============================================================================--
function 主屏幕类:取鼠标所在窗口(是否全部)

	for n=table.getn(Q_界面_窗口_数组), 1,-1 do
		if (是否全部 ~=nil) then
			if(Q_界面_窗口_数组[n].可视 and Q_界面_窗口_数组[n]:检测点_全局()) then
				return n
			end
		else
			if(Q_界面_窗口_数组[n].可视 and Q_界面_窗口_数组[n]:检测点()) then
				return n
			end
		end
	end

      return 0
end

--=============================================================================--
-- ■ CD效果更新()
--=============================================================================--
function 主屏幕类:CD效果更新()

	if (Q_全局CD.HP_特效显示) then

		Q_全局CD.HP_延时特效:更新(8,13,21)
		if (Q_全局CD.HP_延时特效:取间隔帧()>7) then
			Q_全局CD.HP_特效显示 = false
		end

	end

	if ( Q_全局CD.HP_延时时间 ~= 0) then
		 Q_全局CD.HP_延时参考 =  Q_全局CD.HP_延时参考 + dt

		 if (Q_全局CD.HP_延时参考 >= Q_全局CD.HP_延时时间) then

			Q_全局CD.HP_延时参考 = 0
			Q_全局CD.HP_延时时间 = 0
			Q_全局CD.HP_特效显示 = true

			Q_全局CD.HP_延时特效:重置()

		 end
		Q_全局CD.HP_延时进度 = (Q_全局CD.HP_延时时间 - Q_全局CD.HP_延时参考) / Q_全局CD.HP_延时时间 * 28

	end

	if (Q_全局CD.MP_特效显示) then

		Q_全局CD.MP_延时特效:更新(8,13,21)
		if (Q_全局CD.MP_延时特效:取间隔帧()>7) then
			Q_全局CD.MP_特效显示 = false
		end

	end

	if ( Q_全局CD.MP_延时时间 ~= 0) then

		Q_全局CD.MP_延时参考 =  Q_全局CD.MP_延时参考 + dt

		if (Q_全局CD.MP_延时参考 >= Q_全局CD.MP_延时时间) then

			Q_全局CD.MP_延时参考 = 0
			Q_全局CD.MP_延时时间 = 0
			Q_全局CD.MP_特效显示 = true

			Q_全局CD.MP_延时特效:重置()

		end
		Q_全局CD.MP_延时进度 = (Q_全局CD.MP_延时时间 - Q_全局CD.MP_延时参考) / Q_全局CD.MP_延时时间 * 28

	end

end

--=============================================================================--
-- ■ 鼠标左键按下()
--=============================================================================--
function 主屏幕类:鼠标左键按下()

	if(self.窗口id ~= 0 )then

		for n=1, table.getn(Q_界面_窗口_数组) do
			Q_界面_窗口_数组[n]:置焦点(false)
		end

		Q_界面_窗口_数组[self.鼠标窗口全id]:置焦点(true)
		Q_界面_窗口_数组[self.鼠标窗口全id]:初始移动()

	end

	if( self.鼠标窗口全id == 0 and Q_鼠标技能.对象 ~= nil) then

		if (Q_鼠标坐标.y < 520) then
			--Q_技能窗口:归还技能图标(Q_鼠标技能.对象)
			Q_鼠标技能.对象 = nil
		end

	end

	--if (Q_NPC菜单.是否显示 and Q_NPC菜单.焦点 == false ) then
	--	Q_NPC菜单:关闭()
	--end


end

--=============================================================================--
-- ■ 鼠标右键按下()
--=============================================================================--
function 主屏幕类:鼠标右键按下()

	if (Q_游戏鼠标.模式 == "出售" or  Q_游戏鼠标.模式 == "购买" or  Q_游戏鼠标.模式 == "分解") then
		Q_游戏鼠标.模式 = "普通"
	end

	if(Q_最后点击格子id ~= 0 and Q_鼠标道具.id ~=0) then

		if (Q_最后点击格子id <= 32) then    -- 包裹格子中

			--Q_包裹窗口.子夹组[Q_最后点击包裹子夹].格子[Q_最后点击格子id]:置道具(Q_鼠标道具.id,true,Q_鼠标道具.数量)

			Q_包裹窗口:归还道具(Q_鼠标道具.id,Q_鼠标道具.数量)

		elseif ( Q_最后点击格子id >= 51 and Q_最后点击格子id <=56 ) then  --快捷格子中

			Q_快捷道具格子[Q_最后点击格子id-50]:置道具(Q_鼠标道具.id,true,Q_鼠标道具.数量)

		elseif (Q_最后点击格子id >= 101 and Q_最后点击格子id <= 110) then
			Q_包裹窗口.身体格子[Q_最后点击格子id-100]:置道具(Q_鼠标道具.id,true,1)

		elseif (Q_最后点击格子id >= 501 and Q_最后点击格子id <= 535) then
			Q_包裹窗口.装扮格子组[Q_最后点击格子id-500]:置道具(Q_鼠标道具.id,true,1)


		end

		Q_鼠标道具.id = 0
		Q_最后点击格子id= 0

	end

end

--=============================================================================--
-- ■ 快捷键按钮操作()
--=============================================================================--
function 主屏幕类:快捷键按钮操作()

	if (引擎.按键按下(键_1)) then
		Q_快捷道具格子[1]:发动道具()
		return
	end

	if (引擎.按键按下(键_2)) then
		Q_快捷道具格子[2]:发动道具()
		return
	end

	if (引擎.按键按下(键_3)) then
		Q_快捷道具格子[3]:发动道具()
		return
	end

	if (引擎.按键按下(键_4)) then
		Q_快捷道具格子[4]:发动道具()
		return
	end

	if (引擎.按键按下(键_5)) then
		Q_快捷道具格子[5]:发动道具()
		return
	end

	if (引擎.按键按下(键_6)) then
		Q_快捷道具格子[6]:发动道具()
		return
	end



	if (引擎.按键按下(键_A)) then
		Q_快捷技能格子[1]:发动技能(键_A)
		return
	end

	if (引擎.按键按下(键_S)) then
		Q_快捷技能格子[2]:发动技能(键_S)
		return
	end


	if (引擎.按键按下(键_D)) then
		Q_快捷技能格子[3]:发动技能(键_D)
		return
	end


	if (引擎.按键按下(键_F)) then
		Q_快捷技能格子[4]:发动技能(键_F)
		return
	end

	if (引擎.按键按下(键_G)) then
		Q_快捷技能格子[5]:发动技能(键_G)
		return
	end

	if (引擎.按键按下(键_H)) then
		Q_快捷技能格子[6]:发动技能(键_H)
		return
	end

	if (引擎.按键按下(键_Q)) then
		Q_快捷技能格子[7]:发动技能(键_Q)
		return
	end

	if (引擎.按键按下(键_W)) then
		Q_快捷技能格子[8]:发动技能(键_W)
		return
	end


	if (引擎.按键按下(键_E)) then
		Q_快捷技能格子[9]:发动技能(键_E)
		return
	end


	if (引擎.按键按下(键_R)) then
		Q_快捷技能格子[10]:发动技能(键_R)
		return
	end

	if (引擎.按键按下(键_T)) then
		Q_快捷技能格子[11]:发动技能(键_T)
		return
	end

	if (引擎.按键按下(键_Y)) then
		Q_快捷技能格子[12]:发动技能(键_Y)
		return
	end

	if (引擎.按键按下(键_I)) then
		Q_包裹窗口:开关()
		return
	end
	if (引擎.按键按下(键_K)) then
		Q_技能窗口:开关()
		return
	end

	if ( 引擎.按键按下(键_ESC) ) then

		--if (Q_属性窗口.可视) then
		--	Q_属性窗口:开关()
		--	return
		--end

		--if (Q_商店窗口.可视) then
		--	Q_商店窗口:开关()
		--	return
		--end

		--if (Q_分解强化窗口.可视) then
		--	Q_分解强化窗口:开关()
		--	return
		--end

		if (Q_包裹窗口.可视) then
			Q_包裹窗口:开关()
			return
		end

		if (Q_技能窗口.可视) then
			Q_技能窗口:开关()
			return
		end

	end
end

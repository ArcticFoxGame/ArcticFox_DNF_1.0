--=============================================================================--
-- @作者: 白狐剑仙。
-- @邮箱: 1733450036@qq.com
-- @创建时间:   2017-08-01 12:45:25
-- @最后修改来自: 白狐剑仙。
-- @Last Modified time: 2017-11-21 20:50:16
--=============================================================================--
--=============================================================================--
-- ■ 初始化特效数据()
--=============================================================================--
function 初始化特效数据()

	local f = assert(io.open([[Dat/conf/effect.csv]], "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时特效 = {}
	local  再次分割 = {}

	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

			再次分割 = 分割文本(首次分割[n], ",")

			if (table.getn(再次分割) == 9 ) then

				临时特效 =
				{
					名称 = 再次分割[1],
					开始帧= tonumber( 再次分割[2] ),
					结束帧= tonumber( 再次分割[3] ),
					帧率 = tonumber( 再次分割[4] ),
					中心点x = tonumber( 再次分割[5] ),
					中心点y =  tonumber( 再次分割[6] ),
					混合=  tonumber( 再次分割[7] ),
					颜色值=  再次分割[8],
					Y偏移 =  tonumber( 再次分割[9] )
				}

				table.insert(Q_游戏特效组,临时特效)

			end
		end

	end

end

--=============================================================================--
-- ■ 初始化单帧特效数据()
--=============================================================================--
function 初始化单帧特效数据()

	local f = assert(io.open([[Dat/conf/uframe_effect.csv]], "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时特效 = {}
	local  再次分割 = {}

	for n=2, table.getn(首次分割) do
		if (首次分割[n] ~= "") then
			再次分割 = 分割文本(首次分割[n], ",")
			if (table.getn(再次分割) == 5 ) then

				临时特效 =
				{
					名称 = 再次分割[1],
					图片文件= 再次分割[2] ,
					混合=  tonumber( 再次分割[3] ),
					颜色值=  再次分割[4],
					Y偏移 =  tonumber( 再次分割[5] )
				}
				table.insert(Q_游戏单帧特效组,临时特效)
			end
		end
	end
end

--=============================================================================--
-- ■ 初始化地图物品特效数据()
--=============================================================================--
function 初始化MOBJ特效数据()

	local f = assert(io.open([[Dat/conf/Seffect.csv]], "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时特效 = {}
	local  再次分割 = {}

	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

			再次分割 = 分割文本(首次分割[n], ",")

			if (table.getn(再次分割) == 9 ) then

				临时特效 =
				{
					名称 = 再次分割[1],
					开始帧= tonumber( 再次分割[2] ),
					结束帧= tonumber( 再次分割[3] ),
					帧率 = tonumber( 再次分割[4] ),
					中心点x = tonumber( 再次分割[5] ),
					中心点y =  tonumber( 再次分割[6] ),
					混合=  tonumber( 再次分割[7] ),
					颜色值=  再次分割[8],
					Y偏移 =  tonumber( 再次分割[9] )
				}

				table.insert(Q_游戏MOBJ特效组,临时特效)

			end
		end

	end

end
--=============================================================================--
-- ■ 初始化属性打击特效数据()
--=============================================================================--
function 初始化AS特效数据()

	local f = assert(io.open([[Dat/conf/ASeffect.csv]], "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时特效 = {}
	local  再次分割 = {}

	for n=2, table.getn(首次分割) do
		if (首次分割[n] ~= "") then
			再次分割 = 分割文本(首次分割[n], ",")
			if (table.getn(再次分割) == 9 ) then

				临时特效 =
				{
					名称 = 再次分割[1],
					开始帧= tonumber( 再次分割[2] ),
					结束帧= tonumber( 再次分割[3] ),
					帧率 = tonumber( 再次分割[4] ),
					中心点x = tonumber( 再次分割[5] ),
					中心点y =  tonumber( 再次分割[6] ),
					混合=  tonumber( 再次分割[7] ),
					颜色值=  再次分割[8],
					Y偏移 =  tonumber( 再次分割[9] )
				}
				table.insert(Q_游戏AS特效组,临时特效)
			end
		end
	end
end

--=============================================================================--
-- ■ 初始化技能数据()
--=============================================================================--
function 初始化技能数据()

	for n=1,table.getn(Q_技能数据组)do

		临时技能 =
		{
			技能标识 = Q_技能数据组[n].技能标识 ,
			技能名称 = Q_技能数据组[n].技能名称 ,
			技能类型 = Q_技能数据组[n].技能类型 ,
			冷却时间 = Q_技能数据组[n].冷却时间 ,
			消耗MP   = Q_技能数据组[n].消耗MP ,
			技能说明 = Q_技能数据组[n].技能说明 ,
			界面说明 = Q_技能数据组[n].界面说明 ,
			其他介绍 = Q_技能数据组[n].其他介绍 ,
			技能图标 = Q_技能数据组[n].技能图标 ,
			学习等级 = Q_技能数据组[n].学习等级 ,
			最高等级 = Q_技能数据组[n].最高等级 ,
			技能动作 = Q_技能数据组[n].技能动作 ,
			分类 =  Q_技能数据组[n].分类 ,
			英文 = Q_技能数据组[n].英文 ,
			操作指令 = Q_技能数据组[n].操作指令,
			等级 = Q_技能数据组[n].等级,
			下一学习等级 = Q_技能数据组[n].下一学习等级 ,
			可用 = Q_技能数据组[n].可用 ,
			延时时间参考 = 0 ,
			延时时间 = 0,
		}

		--table.insert(Q_游戏技能组,Q_技能数据组[n])

		if (临时技能.技能图标 ~= "0") then

			临时图片 = require("gge纹理类")(Q_目录..[[/Dat/UI/图标类/skillicon/]] .. 临时技能.技能图标)
			临时技能.精灵 = require ("gge精灵类")(临时图片,0,0,临时图片:取宽度(临时图片),临时图片:取高度())

		end

		临时技能.特效显示 = false

		Q_游戏技能组[临时技能.技能名称] = 临时技能



	end
end
--=============================================================================--
-- ■ 初始化道具数据()
--=============================================================================--
function 初始化道具数据()


	local f = assert(io.open("Dat/conf/item.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时道具 = {}
	local  再次分割 = {}
	local 临时图片  = 0

	local a = 0

	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

				再次分割 = 分割文本(首次分割[n], ",")


				if (table.getn(再次分割) == 40 ) then

					a = a + 1

						临时道具 =
						{
							物品id = a,
							名称 = 再次分割[1],
							英文 = 再次分割[2],
							重量 = tonumber( 再次分割[3] ),
							价格 = tonumber( 再次分割[4] ),
							分类 =  再次分割[5] ,
							子类 =  再次分割[6] ,
							道具图标 = 再次分割[7] ,
							地面图标 = 再次分割[8] ,
							攻击速度状态 =   再次分割[9] ,
							武器物理技能MP = tonumber( 再次分割[10] ),
							武器物理技能冷却时间 = tonumber( 再次分割[11] ),
							武器魔法技能MP  = tonumber( 再次分割[12] ),
							武器魔法技能冷却时间 = tonumber( 再次分割[13] ),
							耐久度= tonumber( 再次分割[14] ),
							需要等级= tonumber( 再次分割[15] ),
							限制职业  = 再次分割[16],
							物理攻击力 = tonumber( 再次分割[17] ),
							魔法攻击力 = tonumber( 再次分割[18] ),
							物理防御力 = tonumber( 再次分割[19] ),
							魔法防御力 = tonumber( 再次分割[20] ),
							力量 = tonumber( 再次分割[21] ),
							智力 = tonumber( 再次分割[22] ),
							体力 = tonumber( 再次分割[23] ),
							精神 = tonumber( 再次分割[24] ),
							移动速度 = tonumber( 再次分割[25] ),
							负重上线 = tonumber( 再次分割[26] ),
							命中率 = tonumber( 再次分割[27] ),
							HPMAX = tonumber( 再次分割[28] ),
							MPMAX = tonumber( 再次分割[29] ),
							物理暴击率 = tonumber( 再次分割[30] ),
							魔法暴击率 = tonumber( 再次分割[31] ),
							施放速度 = tonumber( 再次分割[32] ),
							回避率 = tonumber( 再次分割[33] ),
							每分钟恢复HP = tonumber( 再次分割[34] ),
							每分钟恢复MP = tonumber( 再次分割[35] ),
							颜色值 =  再次分割[36] ,
							说明 =  再次分割[37] ,
							总类 =  再次分割[38],
							耐久度加成 = tonumber( 再次分割[39] ),
							脚本文件 = 再次分割[40]
						}

						if (临时道具.道具图标 ~= "0") then

							临时图片 = require("gge纹理类")(Q_目录..[[/Dat/UI/图标类/itemico/]] .. 临时道具.道具图标)
							临时道具.精灵 = require ("gge精灵类")(临时图片,0,0,临时图片:取宽度(临时图片),临时图片:取高度())

						end
					table.insert(Q_游戏道具组,临时道具)
				end

		end

	end


end